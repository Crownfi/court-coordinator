/* eslint-disable */
/**
 * This file was automatically generated by crownfi-sei-sdk-autogen.
 * DO NOT MODIFY IT BY HAND.
 * The Rust definition of the associated structs is the source of truth!!
 */
import {Addr, ArrayOfUint32, ArrayOf_CourtQueryResponseTransactionProposal, ArrayOf_CourtQueryResponseUserVote, ArrayOf_CourtQueryUserWithActiveProposal, CourtAdminExecuteMsg, CourtAppConfigJsonable, CourtExecuteMsg, CourtQueryMsg, CourtQueryResponseDenom, CourtQueryUserWithActiveProposal, CourtUserStatsJsonable, CourtUserVoteInfoJsonable, CourtUserVoteStatus, Nullable_CourtQueryResponseTransactionProposal, ProposedCourtMsgJsonable, Uint32} from "./types.js";
import {Coin} from "@cosmjs/amino";
import {ExecuteInstruction} from "@cosmjs/cosmwasm-stargate";
import {ContractBase} from "@crownfi/sei-utils";
export class CourtCoordinatorContract extends ContractBase {
	queryConfig(): Promise<CourtAppConfigJsonable> {
		const msg = "config" satisfies CourtQueryMsg;
		return this.query(msg);
	}
	queryDenom(): Promise<CourtQueryResponseDenom> {
		const msg = "denom" satisfies CourtQueryMsg;
		return this.query(msg);
	}
	queryProposalAmount(): Promise<Uint32> {
		const msg = "proposal_amount" satisfies CourtQueryMsg;
		return this.query(msg);
	}
	queryGetProposal(args: {"id": number}): Promise<Nullable_CourtQueryResponseTransactionProposal> {
		const msg = {"get_proposal": args} satisfies CourtQueryMsg;
		return this.query(msg);
	}
	queryGetProposals(args: {"descending": boolean, "limit"?: number | null, "skip"?: number | null}): Promise<ArrayOf_CourtQueryResponseTransactionProposal> {
		const msg = {"get_proposals": args} satisfies CourtQueryMsg;
		return this.query(msg);
	}
	queryUserStats(args: {"user": Addr}): Promise<CourtUserStatsJsonable> {
		const msg = {"user_stats": args} satisfies CourtQueryMsg;
		return this.query(msg);
	}
	queryUserVoteInfo(args: {"proposal_id": number, "user": Addr}): Promise<CourtUserVoteInfoJsonable> {
		const msg = {"user_vote_info": args} satisfies CourtQueryMsg;
		return this.query(msg);
	}
	queryGetUsersWithActiveProposals(args: {"after"?: CourtQueryUserWithActiveProposal | null, "descending": boolean, "limit"?: number | null}): Promise<ArrayOf_CourtQueryUserWithActiveProposal> {
		const msg = {"get_users_with_active_proposals": args} satisfies CourtQueryMsg;
		return this.query(msg);
	}
	queryGetUserActiveProposals(args: {"descending": boolean, "limit"?: number | null, "skip"?: number | null, "user": Addr}): Promise<ArrayOfUint32> {
		const msg = {"get_user_active_proposals": args} satisfies CourtQueryMsg;
		return this.query(msg);
	}
	queryGetProposalUserVotes(args: {"after"?: Addr | null, "descending": boolean, "limit"?: number | null, "proposal_id": number}): Promise<ArrayOf_CourtQueryResponseUserVote> {
		const msg = {"get_proposal_user_votes": args} satisfies CourtQueryMsg;
		return this.query(msg);
	}
	buildStakeIx(funds?: Coin[]): ExecuteInstruction {
		const msg = "stake" satisfies CourtExecuteMsg;
		return this.executeIx(msg, funds);
	}
	buildUnstakeIx(funds?: Coin[]): ExecuteInstruction {
		const msg = "unstake" satisfies CourtExecuteMsg;
		return this.executeIx(msg, funds);
	}
	buildAdminIx(args: CourtAdminExecuteMsg, funds?: Coin[]): ExecuteInstruction {
		const msg = {"admin": args} satisfies CourtExecuteMsg;
		return this.executeIx(msg, funds);
	}
	buildVoteIx(args: {"id": number, "vote": CourtUserVoteStatus}, funds?: Coin[]): ExecuteInstruction {
		const msg = {"vote": args} satisfies CourtExecuteMsg;
		return this.executeIx(msg, funds);
	}
	buildDeactivateVotesIx(args: {"limit"?: number | null, "user"?: Addr | null} = {}, funds?: Coin[]): ExecuteInstruction {
		const msg = {"deactivate_votes": args} satisfies CourtExecuteMsg;
		return this.executeIx(msg, funds);
	}
	buildProposeTransactionIx(args: {"expiry_time_seconds": number, "msgs": ProposedCourtMsgJsonable[]}, funds?: Coin[]): ExecuteInstruction {
		const msg = {"propose_transaction": args} satisfies CourtExecuteMsg;
		return this.executeIx(msg, funds);
	}
	buildExecuteProposalIx(args: {"id": number}, funds?: Coin[]): ExecuteInstruction {
		const msg = {"execute_proposal": args} satisfies CourtExecuteMsg;
		return this.executeIx(msg, funds);
	}
}
