/* eslint-disable */
/**
 * This file was automatically generated by crownfi-sei-sdk-autogen.
 * DO NOT MODIFY IT BY HAND.
 * The Rust definition of the associated structs is the source of truth!!
 */

/**
 * A human readable address.
 *
 * In Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.
 *
 * This type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.
 *
 * This type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.
 *
 * This interface was referenced by `CrownfiSdkMakerAutogen`'s JSON-Schema
 * via the `definition` "Addr".
 */
export type Addr = string;
/**
 * This interface was referenced by `CrownfiSdkMakerAutogen`'s JSON-Schema
 * via the `definition` "TransactionProposalExecutionStatus".
 */
export type TransactionProposalExecutionStatus = "not_executed" | "executed";
/**
 * A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.
 *
 * # Examples
 *
 * Use `from` to create instances of this and `u128` to get the value out:
 *
 * ``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);
 *
 * let b = Uint128::from(42u64); assert_eq!(b.u128(), 42);
 *
 * let c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```
 *
 * This interface was referenced by `CrownfiSdkMakerAutogen`'s JSON-Schema
 * via the `definition` "Uint128".
 */
export type Uint128 = string;
/**
 * This interface was referenced by `CrownfiSdkMakerAutogen`'s JSON-Schema
 * via the `definition` "ProposedCourtMsgJsonable".
 */
export type ProposedCourtMsgJsonable =
  | {
      send_coin: {
        amount: Uint128;
        denom: FungibleAssetKindString;
        to: string;
        [k: string]: unknown;
      };
    }
  | {
      execute_evm_contract: {
        contract: string;
        msg: Binary;
        value: Uint128;
        [k: string]: unknown;
      };
    }
  | {
      execute_wasm_contract: {
        contract: Addr;
        funds: Coin[];
        msg: Binary;
        [k: string]: unknown;
      };
    }
  | {
      upgrade_wasm_contract: {
        contract: Addr;
        msg: Binary;
        new_code_id: number;
        [k: string]: unknown;
      };
    }
  | {
      change_wasm_contract_admin: {
        contract: Addr;
        new_admin: Addr;
        [k: string]: unknown;
      };
    }
  | {
      clear_wasm_contract_admin: {
        contract: Addr;
        [k: string]: unknown;
      };
    }
  | {
      tokenfactory_mint: {
        tokens: Coin;
        [k: string]: unknown;
      };
    };
/**
 * This interface was referenced by `CrownfiSdkMakerAutogen`'s JSON-Schema
 * via the `definition` "FungibleAssetKindString".
 */
export type FungibleAssetKindString = string;
/**
 * Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.
 *
 * This is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.
 *
 * This interface was referenced by `CrownfiSdkMakerAutogen`'s JSON-Schema
 * via the `definition` "Binary".
 */
export type Binary = string;
/**
 * Transaction proposal status, this is derived from the actual proposal struct rather than as a property.
 *
 * The way this is derived is documented below. ```rust,ignore let proposal_status = if transaction_executed_status == TransactionExecutionStatus::Executed { TransactionProposalStatus::Executed } else if transaction_executed_status == TransactionExecutionStatus::Expired { TransactionProposalStatus::ExecutionExpired } else if expiry < last_config_change_time { TransactionProposalStatus::Rejected } else if current_time < expiry { if ((votes_for + votes_against) * 100 / token_supply) >= minimum_vote_turnout_percent || (votes_for * 100 / token_supply) >= minimum_vote_pass_percent { TransactionProposalStatus::Passed } else { TransactionProposalStatus::Pending } } else if current_time >= expiry && ( ((votes_for + votes_against) * 100 / token_supply) < minimum_vote_turnout_percent || (votes_for * 100 / (votes_for + votes_against)) < minimum_vote_pass_percent ) { TransactionProposalStatus::Rejected } else { TransactionProposalStatus::Passed } ```
 *
 * This interface was referenced by `CrownfiSdkMakerAutogen`'s JSON-Schema
 * via the `definition` "TransactionProposalStatus".
 */
export type TransactionProposalStatus =
  | "pending"
  | "rejected"
  | "passed"
  | "executed"
  | "execution_expired"
  | "rejected_or_expired";
/**
 * This interface was referenced by `CrownfiSdkMakerAutogen`'s JSON-Schema
 * via the `definition` "Array_of_CourtQueryResponseTransactionProposal".
 */
export type ArrayOf_CourtQueryResponseTransactionProposal = CourtQueryResponseTransactionProposal[];
/**
 * This interface was referenced by `CrownfiSdkMakerAutogen`'s JSON-Schema
 * via the `definition` "CourtUserVoteStatus".
 */
export type CourtUserVoteStatus = "Abstain" | "Approve" | "Oppose";
/**
 * This interface was referenced by `CrownfiSdkMakerAutogen`'s JSON-Schema
 * via the `definition` "Array_of_CourtQueryResponseUserVote".
 */
export type ArrayOf_CourtQueryResponseUserVote = CourtQueryResponseUserVote[];
/**
 * This interface was referenced by `CrownfiSdkMakerAutogen`'s JSON-Schema
 * via the `definition` "Array_of_CourtQueryUserWithActiveProposal".
 */
export type ArrayOf_CourtQueryUserWithActiveProposal = CourtQueryUserWithActiveProposal[];
/**
 * This interface was referenced by `CrownfiSdkMakerAutogen`'s JSON-Schema
 * via the `definition` "Array_of_uint32".
 */
export type ArrayOfUint32 = number[];
/**
 * This interface was referenced by `CrownfiSdkMakerAutogen`'s JSON-Schema
 * via the `definition` "CourtAdminExecuteMsg".
 */
export type CourtAdminExecuteMsg =
  | {
      change_config: {
        execution_expiry_time_seconds?: number | null;
        max_proposal_expiry_time_seconds?: number | null;
        minimum_vote_pass_percent?: number | null;
        minimum_vote_proposal_percent?: number | null;
        minimum_vote_turnout_percent?: number | null;
      };
    }
  | {
      change_admin: {
        admin: Addr;
      };
    }
  | {
      allow_new_proposals: {
        allowed: boolean;
      };
    }
  | {
      mint_shares: {
        amount: Uint128;
        receiver: Addr;
      };
    };
/**
 * This interface was referenced by `CrownfiSdkMakerAutogen`'s JSON-Schema
 * via the `definition` "CourtExecuteMsg".
 */
export type CourtExecuteMsg =
  | ("stake" | "unstake")
  | {
      admin: CourtAdminExecuteMsg;
    }
  | {
      vote: {
        id: number;
        vote: CourtUserVoteStatus;
      };
    }
  | {
      deactivate_votes: {
        limit?: number | null;
        user?: Addr | null;
      };
    }
  | {
      propose_transaction: {
        expiry_time_seconds: number;
        msgs: ProposedCourtMsgJsonable[];
      };
    }
  | {
      execute_proposal: {
        id: number;
      };
    };
/**
 * This interface was referenced by `CrownfiSdkMakerAutogen`'s JSON-Schema
 * via the `definition` "CourtQueryMsg".
 */
export type CourtQueryMsg =
  | ("denom" | "proposal_amount")
  | "config"
  | {
      get_proposal: {
        id: number;
      };
    }
  | {
      get_proposals: {
        descending: boolean;
        limit?: number | null;
        skip?: number | null;
      };
    }
  | {
      user_stats: {
        user: Addr;
      };
    }
  | {
      user_vote_info: {
        proposal_id: number;
        user: Addr;
      };
    }
  | {
      get_users_with_active_proposals: {
        after?: CourtQueryUserWithActiveProposal | null;
        descending: boolean;
        limit?: number | null;
      };
    }
  | {
      get_user_active_proposals: {
        descending: boolean;
        limit?: number | null;
        skip?: number | null;
        user: Addr;
      };
    }
  | {
      get_proposal_user_votes: {
        after?: Addr | null;
        descending: boolean;
        limit?: number | null;
        proposal_id: number;
      };
    };
/**
 * This interface was referenced by `CrownfiSdkMakerAutogen`'s JSON-Schema
 * via the `definition` "Nullable_CourtQueryResponseTransactionProposal".
 */
export type Nullable_CourtQueryResponseTransactionProposal = CourtQueryResponseTransactionProposal | null;
/**
 * This interface was referenced by `CrownfiSdkMakerAutogen`'s JSON-Schema
 * via the `definition` "uint32".
 */
export type Uint32 = number;

export interface CrownfiSdkMakerAutogen {
  [k: string]: unknown;
}
/**
 * This interface was referenced by `CrownfiSdkMakerAutogen`'s JSON-Schema
 * via the `definition` "CourtQueryResponseTransactionProposal".
 */
export interface CourtQueryResponseTransactionProposal {
  info: TransactionProposalInfoJsonable;
  messages: ProposedCourtMsgJsonable[];
  proposal_id: number;
  status: TransactionProposalStatus;
  [k: string]: unknown;
}
/**
 * This interface was referenced by `CrownfiSdkMakerAutogen`'s JSON-Schema
 * via the `definition` "TransactionProposalInfoJsonable".
 */
export interface TransactionProposalInfoJsonable {
  execution_status: TransactionProposalExecutionStatus;
  expiry_timestamp_ms: number;
  proposer: Addr;
  votes_abstain: Uint128;
  votes_against: Uint128;
  votes_for: Uint128;
  [k: string]: unknown;
}
/**
 * This interface was referenced by `CrownfiSdkMakerAutogen`'s JSON-Schema
 * via the `definition` "Coin".
 */
export interface Coin {
  amount: Uint128;
  denom: string;
  [k: string]: unknown;
}
/**
 * This interface was referenced by `CrownfiSdkMakerAutogen`'s JSON-Schema
 * via the `definition` "CourtQueryResponseUserVote".
 */
export interface CourtQueryResponseUserVote {
  info: CourtUserVoteInfoJsonable;
  user: Addr;
  [k: string]: unknown;
}
/**
 * This interface was referenced by `CrownfiSdkMakerAutogen`'s JSON-Schema
 * via the `definition` "CourtUserVoteInfoJsonable".
 */
export interface CourtUserVoteInfoJsonable {
  active_votes: Uint128;
  vote: CourtUserVoteStatus;
  [k: string]: unknown;
}
/**
 * This interface was referenced by `CrownfiSdkMakerAutogen`'s JSON-Schema
 * via the `definition` "CourtQueryUserWithActiveProposal".
 */
export interface CourtQueryUserWithActiveProposal {
  proposal_id: number;
  user: Addr;
  [k: string]: unknown;
}
/**
 * This interface was referenced by `CrownfiSdkMakerAutogen`'s JSON-Schema
 * via the `definition` "CourtAppConfigJsonable".
 */
export interface CourtAppConfigJsonable {
  admin: Addr;
  allow_new_proposals: boolean;
  execution_expiry_time_seconds: number;
  last_config_change_timestamp_ms: number;
  max_proposal_expiry_time_seconds: number;
  minimum_vote_pass_percent: number;
  minimum_vote_proposal_percent: number;
  minimum_vote_turnout_percent: number;
  [k: string]: unknown;
}
/**
 * This interface was referenced by `CrownfiSdkMakerAutogen`'s JSON-Schema
 * via the `definition` "CourtInstantiateMsg".
 */
export interface CourtInstantiateMsg {
  admin: Addr;
  execution_expiry_time_seconds: number;
  max_proposal_expiry_time_seconds: number;
  minimum_vote_pass_percent: number;
  minimum_vote_proposal_percent: number;
  minimum_vote_turnout_percent: number;
  shares_mint_amount: Uint128;
  shares_mint_receiver: Addr;
  vote_share_description: string;
  vote_share_name: string;
  vote_share_symbol: string;
}
/**
 * This interface was referenced by `CrownfiSdkMakerAutogen`'s JSON-Schema
 * via the `definition` "CourtQueryResponseDenom".
 */
export interface CourtQueryResponseDenom {
  votes: string;
  [k: string]: unknown;
}
/**
 * This interface was referenced by `CrownfiSdkMakerAutogen`'s JSON-Schema
 * via the `definition` "CourtUserStatsJsonable".
 */
export interface CourtUserStatsJsonable {
  staked_votes: Uint128;
  [k: string]: unknown;
}
