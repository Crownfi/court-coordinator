// auto-generated by C.E.W.T.
// DO NOT EDIT BY HAND!!
export class CourtConfigRefs {
	#element: HTMLElement | ShadowRoot;
	constructor(element: HTMLElement | ShadowRoot) {
		this.#element = element;
	}
	#configProposalsAllowed?: HTMLInputElement;
	get configProposalsAllowed() {
		if (this.#configProposalsAllowed === undefined) {
			this.#configProposalsAllowed = this.#element.querySelector("[cewt-ref=\"config-proposals-allowed\"]:not(:scope [is] *)")!;
		}
		return this.#configProposalsAllowed;
	}
	#configMinVotesNewPercent?: HTMLSpanElement;
	get configMinVotesNewPercent() {
		if (this.#configMinVotesNewPercent === undefined) {
			this.#configMinVotesNewPercent = this.#element.querySelector("[cewt-ref=\"config-min-votes-new-percent\"]:not(:scope [is] *)")!;
		}
		return this.#configMinVotesNewPercent;
	}
	#configMinVotesNewAmount?: HTMLSpanElement;
	get configMinVotesNewAmount() {
		if (this.#configMinVotesNewAmount === undefined) {
			this.#configMinVotesNewAmount = this.#element.querySelector("[cewt-ref=\"config-min-votes-new-amount\"]:not(:scope [is] *)")!;
		}
		return this.#configMinVotesNewAmount;
	}
	#configMinTurnout?: HTMLTableCellElement;
	get configMinTurnout() {
		if (this.#configMinTurnout === undefined) {
			this.#configMinTurnout = this.#element.querySelector("[cewt-ref=\"config-min-turnout\"]:not(:scope [is] *)")!;
		}
		return this.#configMinTurnout;
	}
	#configMinApproval?: HTMLTableCellElement;
	get configMinApproval() {
		if (this.#configMinApproval === undefined) {
			this.#configMinApproval = this.#element.querySelector("[cewt-ref=\"config-min-approval\"]:not(:scope [is] *)")!;
		}
		return this.#configMinApproval;
	}
	#configVotingTime?: HTMLTableCellElement;
	get configVotingTime() {
		if (this.#configVotingTime === undefined) {
			this.#configVotingTime = this.#element.querySelector("[cewt-ref=\"config-voting-time\"]:not(:scope [is] *)")!;
		}
		return this.#configVotingTime;
	}
	#configExecutionWindow?: HTMLTableCellElement;
	get configExecutionWindow() {
		if (this.#configExecutionWindow === undefined) {
			this.#configExecutionWindow = this.#element.querySelector("[cewt-ref=\"config-execution-window\"]:not(:scope [is] *)")!;
		}
		return this.#configExecutionWindow;
	}
	#configChangeTime?: HTMLTableCellElement;
	get configChangeTime() {
		if (this.#configChangeTime === undefined) {
			this.#configChangeTime = this.#element.querySelector("[cewt-ref=\"config-change-time\"]:not(:scope [is] *)")!;
		}
		return this.#configChangeTime;
	}
	#configAdmin?: HTMLTableCellElement;
	get configAdmin() {
		if (this.#configAdmin === undefined) {
			this.#configAdmin = this.#element.querySelector("[cewt-ref=\"config-admin\"]:not(:scope [is] *)")!;
		}
		return this.#configAdmin;
	}
	#editButton?: HTMLButtonElement;
	get editButton() {
		if (this.#editButton === undefined) {
			this.#editButton = this.#element.querySelector("[cewt-ref=\"edit-button\"]:not(:scope [is] *)")!;
		}
		return this.#editButton;
	}
}
let _templateCourtConfig: HTMLTemplateElement | null = null;
function getCourtConfigTemplate(): HTMLTemplateElement {
	if (_templateCourtConfig == null) {
		 _templateCourtConfig = document.createElement("template")
		 _templateCourtConfig.innerHTML = "\n\t<h1>Royal Court Coordinator</h1>\n\t<table>\n\t\t<tbody><tr>\n\t\t\t<th>Proposals enabled</th>\n\t\t\t<td>\n\t\t\t\t<label class=\"checkbox\">\n\t\t\t\t\t<input disabled=\"\" cewt-ref=\"config-proposals-allowed\" type=\"checkbox\"><span>&nbsp;</span>\n\t\t\t\t</label>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<th>Minimum votes for new proposal</th><td>\n\t\t\t\t<span cewt-ref=\"config-min-votes-new-percent\">--</span>% of total supply<br>\n\t\t\t\t(<span cewt-ref=\"config-min-votes-new-amount\">--</span>)\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<th>Minimum vote turnout for proposal approval</th><td cewt-ref=\"config-min-turnout\">-</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<th>Minimum proposal approval rating</th><td cewt-ref=\"config-min-approval\">-</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<th>Maximum voting time</th><td cewt-ref=\"config-voting-time\">-</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<th>Proposal execution window</th><td cewt-ref=\"config-execution-window\">-</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<th>Last config change time</th><td cewt-ref=\"config-change-time\">-</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<th>Admin</th><td cewt-ref=\"config-admin\">-</td>\n\t\t</tr>\n\t</tbody></table>\n\t<button class=\"primary\" cewt-ref=\"edit-button\">Change config</button>\n";
	}
	return _templateCourtConfig;
}
export class CourtConfigAutogen extends HTMLDivElement {
	readonly refs: CourtConfigRefs;
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				getCourtConfigTemplate()
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "court-config"); // allow for easy query selecting
		this.refs = new CourtConfigRefs(this);
	}
	connectedCallback() {
		// To be overridden by child class
	}
	disconnectedCallback() {
		// To be overridden by child class
	}
	adoptedCallback() {
		// To be overridden by child class
	}
	public static registerElement() {
		customElements.define("court-config", this, { extends: "div"});
	}
}
