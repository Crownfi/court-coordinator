// auto-generated by C.E.W.T.
// DO NOT EDIT BY HAND!!
export class CourtProposalRefs {
	#element: HTMLElement | ShadowRoot;
	constructor(element: HTMLElement | ShadowRoot) {
		this.#element = element;
	}
	#proposalId?: HTMLSpanElement;
	get proposalId() {
		if (this.#proposalId === undefined) {
			this.#proposalId = this.#element.querySelector("[cewt-ref=\"proposal-id\"]:not(:scope [is] *)")!;
		}
		return this.#proposalId;
	}
	#status?: HTMLDivElement;
	get status() {
		if (this.#status === undefined) {
			this.#status = this.#element.querySelector("[cewt-ref=\"status\"]:not(:scope [is] *)")!;
		}
		return this.#status;
	}
	#proposer?: HTMLSpanElement;
	get proposer() {
		if (this.#proposer === undefined) {
			this.#proposer = this.#element.querySelector("[cewt-ref=\"proposer\"]:not(:scope [is] *)")!;
		}
		return this.#proposer;
	}
	#msgList?: HTMLOListElement;
	get msgList() {
		if (this.#msgList === undefined) {
			this.#msgList = this.#element.querySelector("[cewt-ref=\"msg-list\"]:not(:scope [is] *)")!;
		}
		return this.#msgList;
	}
	#votesUser?: HTMLDivElement;
	get votesUser() {
		if (this.#votesUser === undefined) {
			this.#votesUser = this.#element.querySelector("[cewt-ref=\"votes-user\"]:not(:scope [is] *)")!;
		}
		return this.#votesUser;
	}
	#votesFor?: HTMLDivElement;
	get votesFor() {
		if (this.#votesFor === undefined) {
			this.#votesFor = this.#element.querySelector("[cewt-ref=\"votes-for\"]:not(:scope [is] *)")!;
		}
		return this.#votesFor;
	}
	#votesAgainst?: HTMLDivElement;
	get votesAgainst() {
		if (this.#votesAgainst === undefined) {
			this.#votesAgainst = this.#element.querySelector("[cewt-ref=\"votes-against\"]:not(:scope [is] *)")!;
		}
		return this.#votesAgainst;
	}
	#voteForButton?: HTMLButtonElement;
	get voteForButton() {
		if (this.#voteForButton === undefined) {
			this.#voteForButton = this.#element.querySelector("[cewt-ref=\"vote-for-button\"]:not(:scope [is] *)")!;
		}
		return this.#voteForButton;
	}
	#voteAgainstButton?: HTMLButtonElement;
	get voteAgainstButton() {
		if (this.#voteAgainstButton === undefined) {
			this.#voteAgainstButton = this.#element.querySelector("[cewt-ref=\"vote-against-button\"]:not(:scope [is] *)")!;
		}
		return this.#voteAgainstButton;
	}
	#finalizeButton?: HTMLButtonElement;
	get finalizeButton() {
		if (this.#finalizeButton === undefined) {
			this.#finalizeButton = this.#element.querySelector("[cewt-ref=\"finalize-button\"]:not(:scope [is] *)")!;
		}
		return this.#finalizeButton;
	}
}
let _templateCourtProposal: HTMLTemplateElement | null = null;
function getCourtProposalTemplate(): HTMLTemplateElement {
	if (_templateCourtProposal == null) {
		 _templateCourtProposal = document.createElement("template")
		 _templateCourtProposal.innerHTML = "\n\t<h2>Proposal&nbsp;<span cewt-ref=\"proposal-id\">??</span></h2>\n\t<div cewt-ref=\"status\" class=\"important-note\">\n\t\tUnknown status\n\t</div>\n\t<p>Proposed by: <span cewt-ref=\"proposer\">????</span></p>\n\t<ol class=\"vote-msgs\" start=\"0\" cewt-ref=\"msg-list\">\n\n\t</ol>\n\t<div cewt-ref=\"votes-user\" class=\"important-note\">\n\t\tYou didn\'t vote on this\n\t</div>\n\t<div class=\"vote-ratio-container\">\n\t\t<div cewt-ref=\"votes-for\" class=\"vote-ratio-for\">\n\t\t\t??? (??%)\n\t\t</div>\n\t\t<div cewt-ref=\"votes-against\" class=\"vote-ratio-against\">\n\t\t\t(??%) ???\n\t\t</div>\n\t</div>\n\t<div class=\"vote-button-container\">\n\t\t<button cewt-ref=\"vote-for-button\" class=\"success\">Vote for</button>\n\t\t<button cewt-ref=\"vote-against-button\" class=\"danger\">Vote against</button>\n\t</div>\n\t<button cewt-ref=\"finalize-button\" class=\"primary vote-finalize-button\">Vote against</button>\n";
	}
	return _templateCourtProposal;
}
export class CourtProposalAutogen extends HTMLDivElement {
	readonly refs: CourtProposalRefs;
	static get observedAttributes() {
		return ["proposal-id"];
	}
	#attributeProposalIdValue: string | null = null;
	get proposalId(): string | null {
		return this.#attributeProposalIdValue;
	}
	set proposalId(v: string | null) {
		if (v == null) {
			this.removeAttribute("proposal-id");
		}else{
			this.setAttribute("proposal-id", v);
		}
	}
	protected onProposalIdChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null) {
		switch(name) {
			case "proposal-id":
				this.#attributeProposalIdValue = newValue;
				this.onProposalIdChanged(oldValue, newValue);
				break;
			default:
				// Shouldn't happen
		}
	}
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				getCourtProposalTemplate()
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "court-proposal"); // allow for easy query selecting
		this.refs = new CourtProposalRefs(this);
	}
	connectedCallback() {
		// To be overridden by child class
	}
	disconnectedCallback() {
		// To be overridden by child class
	}
	adoptedCallback() {
		// To be overridden by child class
	}
	public static registerElement() {
		customElements.define("court-proposal", this, { extends: "div"});
	}
}
export class CourtProposalMsgSendCoinRefs {
	#element: HTMLElement | ShadowRoot;
	constructor(element: HTMLElement | ShadowRoot) {
		this.#element = element;
	}
	#coins?: HTMLSpanElement;
	get coins() {
		if (this.#coins === undefined) {
			this.#coins = this.#element.querySelector("[cewt-ref=\"coins\"]:not(:scope [is] *)")!;
		}
		return this.#coins;
	}
	#recipient?: HTMLSpanElement;
	get recipient() {
		if (this.#recipient === undefined) {
			this.#recipient = this.#element.querySelector("[cewt-ref=\"recipient\"]:not(:scope [is] *)")!;
		}
		return this.#recipient;
	}
}
let _templateCourtProposalMsgSendCoin: HTMLTemplateElement | null = null;
function getCourtProposalMsgSendCoinTemplate(): HTMLTemplateElement {
	if (_templateCourtProposalMsgSendCoin == null) {
		 _templateCourtProposalMsgSendCoin = document.createElement("template")
		 _templateCourtProposalMsgSendCoin.innerHTML = "\n\tSend <span cewt-ref=\"coins\">??? ???</span> to <span cewt-ref=\"recipient\">???</span>\n";
	}
	return _templateCourtProposalMsgSendCoin;
}
export class CourtProposalMsgSendCoinAutogen extends HTMLLIElement {
	readonly refs: CourtProposalMsgSendCoinRefs;
	static get observedAttributes() {
		return ["amount", "denom", "recipient"];
	}
	#attributeAmountValue: string | null = null;
	get amount(): string | null {
		return this.#attributeAmountValue;
	}
	set amount(v: string | null) {
		if (v == null) {
			this.removeAttribute("amount");
		}else{
			this.setAttribute("amount", v);
		}
	}
	protected onAmountChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	#attributeDenomValue: string | null = null;
	get denom(): string | null {
		return this.#attributeDenomValue;
	}
	set denom(v: string | null) {
		if (v == null) {
			this.removeAttribute("denom");
		}else{
			this.setAttribute("denom", v);
		}
	}
	protected onDenomChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	#attributeRecipientValue: string | null = null;
	get recipient(): string | null {
		return this.#attributeRecipientValue;
	}
	set recipient(v: string | null) {
		if (v == null) {
			this.removeAttribute("recipient");
		}else{
			this.setAttribute("recipient", v);
		}
	}
	protected onRecipientChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null) {
		switch(name) {
			case "amount":
				this.#attributeAmountValue = newValue;
				this.onAmountChanged(oldValue, newValue);
				break;
			case "denom":
				this.#attributeDenomValue = newValue;
				this.onDenomChanged(oldValue, newValue);
				break;
			case "recipient":
				this.#attributeRecipientValue = newValue;
				this.onRecipientChanged(oldValue, newValue);
				break;
			default:
				// Shouldn't happen
		}
	}
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				getCourtProposalMsgSendCoinTemplate()
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "court-proposal-msg-send-coin"); // allow for easy query selecting
		this.refs = new CourtProposalMsgSendCoinRefs(this);
	}
	connectedCallback() {
		// To be overridden by child class
	}
	disconnectedCallback() {
		// To be overridden by child class
	}
	adoptedCallback() {
		// To be overridden by child class
	}
	public static registerElement() {
		customElements.define("court-proposal-msg-send-coin", this, { extends: "li"});
	}
}
export class CourtProposalMsgWasmExecRefs {
	#element: HTMLElement | ShadowRoot;
	constructor(element: HTMLElement | ShadowRoot) {
		this.#element = element;
	}
	#contract?: HTMLSpanElement;
	get contract() {
		if (this.#contract === undefined) {
			this.#contract = this.#element.querySelector("[cewt-ref=\"contract\"]:not(:scope [is] *)")!;
		}
		return this.#contract;
	}
	#list?: HTMLUListElement;
	get list() {
		if (this.#list === undefined) {
			this.#list = this.#element.querySelector("[cewt-ref=\"list\"]:not(:scope [is] *)")!;
		}
		return this.#list;
	}
}
let _templateCourtProposalMsgWasmExec: HTMLTemplateElement | null = null;
function getCourtProposalMsgWasmExecTemplate(): HTMLTemplateElement {
	if (_templateCourtProposalMsgWasmExec == null) {
		 _templateCourtProposalMsgWasmExec = document.createElement("template")
		 _templateCourtProposalMsgWasmExec.innerHTML = "\n\tContract <span cewt-ref=\"contract\">???</span>\n\t<ul cewt-ref=\"list\"></ul>\n";
	}
	return _templateCourtProposalMsgWasmExec;
}
export class CourtProposalMsgWasmExecAutogen extends HTMLLIElement {
	readonly refs: CourtProposalMsgWasmExecRefs;
	static get observedAttributes() {
		return ["payload", "funds", "contract"];
	}
	#attributePayloadValue: string | null = null;
	get payload(): string | null {
		return this.#attributePayloadValue;
	}
	set payload(v: string | null) {
		if (v == null) {
			this.removeAttribute("payload");
		}else{
			this.setAttribute("payload", v);
		}
	}
	protected onPayloadChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	#attributeFundsValue: string | null = null;
	get funds(): string | null {
		return this.#attributeFundsValue;
	}
	set funds(v: string | null) {
		if (v == null) {
			this.removeAttribute("funds");
		}else{
			this.setAttribute("funds", v);
		}
	}
	protected onFundsChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	#attributeContractValue: string | null = null;
	get contract(): string | null {
		return this.#attributeContractValue;
	}
	set contract(v: string | null) {
		if (v == null) {
			this.removeAttribute("contract");
		}else{
			this.setAttribute("contract", v);
		}
	}
	protected onContractChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null) {
		switch(name) {
			case "payload":
				this.#attributePayloadValue = newValue;
				this.onPayloadChanged(oldValue, newValue);
				break;
			case "funds":
				this.#attributeFundsValue = newValue;
				this.onFundsChanged(oldValue, newValue);
				break;
			case "contract":
				this.#attributeContractValue = newValue;
				this.onContractChanged(oldValue, newValue);
				break;
			default:
				// Shouldn't happen
		}
	}
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				getCourtProposalMsgWasmExecTemplate()
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "court-proposal-msg-wasm-exec"); // allow for easy query selecting
		this.refs = new CourtProposalMsgWasmExecRefs(this);
	}
	connectedCallback() {
		// To be overridden by child class
	}
	disconnectedCallback() {
		// To be overridden by child class
	}
	adoptedCallback() {
		// To be overridden by child class
	}
	public static registerElement() {
		customElements.define("court-proposal-msg-wasm-exec", this, { extends: "li"});
	}
}
export class CourtProposalMsgWasmUpgradeRefs {
	#element: HTMLElement | ShadowRoot;
	constructor(element: HTMLElement | ShadowRoot) {
		this.#element = element;
	}
	#contract?: HTMLSpanElement;
	get contract() {
		if (this.#contract === undefined) {
			this.#contract = this.#element.querySelector("[cewt-ref=\"contract\"]:not(:scope [is] *)")!;
		}
		return this.#contract;
	}
	#codeId?: HTMLSpanElement;
	get codeId() {
		if (this.#codeId === undefined) {
			this.#codeId = this.#element.querySelector("[cewt-ref=\"code-id\"]:not(:scope [is] *)")!;
		}
		return this.#codeId;
	}
	#payload?: HTMLPreElement;
	get payload() {
		if (this.#payload === undefined) {
			this.#payload = this.#element.querySelector("[cewt-ref=\"payload\"]:not(:scope [is] *)")!;
		}
		return this.#payload;
	}
}
let _templateCourtProposalMsgWasmUpgrade: HTMLTemplateElement | null = null;
function getCourtProposalMsgWasmUpgradeTemplate(): HTMLTemplateElement {
	if (_templateCourtProposalMsgWasmUpgrade == null) {
		 _templateCourtProposalMsgWasmUpgrade = document.createElement("template")
		 _templateCourtProposalMsgWasmUpgrade.innerHTML = "\n\tUpgrade <span cewt-ref=\"contract\">???</span> to code ID <span cewt-ref=\"code-id\">???</span> <br>\n\t<pre cewt-ref=\"payload\"></pre>\n";
	}
	return _templateCourtProposalMsgWasmUpgrade;
}
export class CourtProposalMsgWasmUpgradeAutogen extends HTMLLIElement {
	readonly refs: CourtProposalMsgWasmUpgradeRefs;
	static get observedAttributes() {
		return ["payload", "code-id", "contract"];
	}
	#attributePayloadValue: string | null = null;
	get payload(): string | null {
		return this.#attributePayloadValue;
	}
	set payload(v: string | null) {
		if (v == null) {
			this.removeAttribute("payload");
		}else{
			this.setAttribute("payload", v);
		}
	}
	protected onPayloadChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	#attributeCodeIdValue: string | null = null;
	get codeId(): string | null {
		return this.#attributeCodeIdValue;
	}
	set codeId(v: string | null) {
		if (v == null) {
			this.removeAttribute("code-id");
		}else{
			this.setAttribute("code-id", v);
		}
	}
	protected onCodeIdChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	#attributeContractValue: string | null = null;
	get contract(): string | null {
		return this.#attributeContractValue;
	}
	set contract(v: string | null) {
		if (v == null) {
			this.removeAttribute("contract");
		}else{
			this.setAttribute("contract", v);
		}
	}
	protected onContractChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null) {
		switch(name) {
			case "payload":
				this.#attributePayloadValue = newValue;
				this.onPayloadChanged(oldValue, newValue);
				break;
			case "code-id":
				this.#attributeCodeIdValue = newValue;
				this.onCodeIdChanged(oldValue, newValue);
				break;
			case "contract":
				this.#attributeContractValue = newValue;
				this.onContractChanged(oldValue, newValue);
				break;
			default:
				// Shouldn't happen
		}
	}
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				getCourtProposalMsgWasmUpgradeTemplate()
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "court-proposal-msg-wasm-upgrade"); // allow for easy query selecting
		this.refs = new CourtProposalMsgWasmUpgradeRefs(this);
	}
	connectedCallback() {
		// To be overridden by child class
	}
	disconnectedCallback() {
		// To be overridden by child class
	}
	adoptedCallback() {
		// To be overridden by child class
	}
	public static registerElement() {
		customElements.define("court-proposal-msg-wasm-upgrade", this, { extends: "li"});
	}
}
export class CourtProposalMsgWasmChAdminRefs {
	#element: HTMLElement | ShadowRoot;
	constructor(element: HTMLElement | ShadowRoot) {
		this.#element = element;
	}
	#contract?: HTMLSpanElement;
	get contract() {
		if (this.#contract === undefined) {
			this.#contract = this.#element.querySelector("[cewt-ref=\"contract\"]:not(:scope [is] *)")!;
		}
		return this.#contract;
	}
	#admin?: HTMLSpanElement;
	get admin() {
		if (this.#admin === undefined) {
			this.#admin = this.#element.querySelector("[cewt-ref=\"admin\"]:not(:scope [is] *)")!;
		}
		return this.#admin;
	}
}
let _templateCourtProposalMsgWasmChAdmin: HTMLTemplateElement | null = null;
function getCourtProposalMsgWasmChAdminTemplate(): HTMLTemplateElement {
	if (_templateCourtProposalMsgWasmChAdmin == null) {
		 _templateCourtProposalMsgWasmChAdmin = document.createElement("template")
		 _templateCourtProposalMsgWasmChAdmin.innerHTML = "\n\tSet upgrade admin for <span cewt-ref=\"contract\">???</span> to <span cewt-ref=\"admin\">???</span>\n";
	}
	return _templateCourtProposalMsgWasmChAdmin;
}
export class CourtProposalMsgWasmChAdminAutogen extends HTMLLIElement {
	readonly refs: CourtProposalMsgWasmChAdminRefs;
	static get observedAttributes() {
		return ["contract", "admin"];
	}
	#attributeContractValue: string | null = null;
	get contract(): string | null {
		return this.#attributeContractValue;
	}
	set contract(v: string | null) {
		if (v == null) {
			this.removeAttribute("contract");
		}else{
			this.setAttribute("contract", v);
		}
	}
	protected onContractChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	#attributeAdminValue: string | null = null;
	get admin(): string | null {
		return this.#attributeAdminValue;
	}
	set admin(v: string | null) {
		if (v == null) {
			this.removeAttribute("admin");
		}else{
			this.setAttribute("admin", v);
		}
	}
	protected onAdminChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null) {
		switch(name) {
			case "contract":
				this.#attributeContractValue = newValue;
				this.onContractChanged(oldValue, newValue);
				break;
			case "admin":
				this.#attributeAdminValue = newValue;
				this.onAdminChanged(oldValue, newValue);
				break;
			default:
				// Shouldn't happen
		}
	}
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				getCourtProposalMsgWasmChAdminTemplate()
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "court-proposal-msg-wasm-ch-admin"); // allow for easy query selecting
		this.refs = new CourtProposalMsgWasmChAdminRefs(this);
	}
	connectedCallback() {
		// To be overridden by child class
	}
	disconnectedCallback() {
		// To be overridden by child class
	}
	adoptedCallback() {
		// To be overridden by child class
	}
	public static registerElement() {
		customElements.define("court-proposal-msg-wasm-ch-admin", this, { extends: "li"});
	}
}
export class CourtProposalMsgWasmClAdminRefs {
	#element: HTMLElement | ShadowRoot;
	constructor(element: HTMLElement | ShadowRoot) {
		this.#element = element;
	}
	#contract?: HTMLSpanElement;
	get contract() {
		if (this.#contract === undefined) {
			this.#contract = this.#element.querySelector("[cewt-ref=\"contract\"]:not(:scope [is] *)")!;
		}
		return this.#contract;
	}
}
let _templateCourtProposalMsgWasmClAdmin: HTMLTemplateElement | null = null;
function getCourtProposalMsgWasmClAdminTemplate(): HTMLTemplateElement {
	if (_templateCourtProposalMsgWasmClAdmin == null) {
		 _templateCourtProposalMsgWasmClAdmin = document.createElement("template")
		 _templateCourtProposalMsgWasmClAdmin.innerHTML = "\n\tClear upgrade admin for <span cewt-ref=\"contract\">???</span>\n";
	}
	return _templateCourtProposalMsgWasmClAdmin;
}
export class CourtProposalMsgWasmClAdminAutogen extends HTMLLIElement {
	readonly refs: CourtProposalMsgWasmClAdminRefs;
	static get observedAttributes() {
		return ["contract"];
	}
	#attributeContractValue: string | null = null;
	get contract(): string | null {
		return this.#attributeContractValue;
	}
	set contract(v: string | null) {
		if (v == null) {
			this.removeAttribute("contract");
		}else{
			this.setAttribute("contract", v);
		}
	}
	protected onContractChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null) {
		switch(name) {
			case "contract":
				this.#attributeContractValue = newValue;
				this.onContractChanged(oldValue, newValue);
				break;
			default:
				// Shouldn't happen
		}
	}
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				getCourtProposalMsgWasmClAdminTemplate()
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "court-proposal-msg-wasm-cl-admin"); // allow for easy query selecting
		this.refs = new CourtProposalMsgWasmClAdminRefs(this);
	}
	connectedCallback() {
		// To be overridden by child class
	}
	disconnectedCallback() {
		// To be overridden by child class
	}
	adoptedCallback() {
		// To be overridden by child class
	}
	public static registerElement() {
		customElements.define("court-proposal-msg-wasm-cl-admin", this, { extends: "li"});
	}
}
export class CourtProposalMsgMintRefs {
	#element: HTMLElement | ShadowRoot;
	constructor(element: HTMLElement | ShadowRoot) {
		this.#element = element;
	}
	#coins?: HTMLSpanElement;
	get coins() {
		if (this.#coins === undefined) {
			this.#coins = this.#element.querySelector("[cewt-ref=\"coins\"]:not(:scope [is] *)")!;
		}
		return this.#coins;
	}
}
let _templateCourtProposalMsgMint: HTMLTemplateElement | null = null;
function getCourtProposalMsgMintTemplate(): HTMLTemplateElement {
	if (_templateCourtProposalMsgMint == null) {
		 _templateCourtProposalMsgMint = document.createElement("template")
		 _templateCourtProposalMsgMint.innerHTML = "\n\tMint <span cewt-ref=\"coins\">???</span>\n";
	}
	return _templateCourtProposalMsgMint;
}
export class CourtProposalMsgMintAutogen extends HTMLLIElement {
	readonly refs: CourtProposalMsgMintRefs;
	static get observedAttributes() {
		return ["amount", "denom"];
	}
	#attributeAmountValue: string | null = null;
	get amount(): string | null {
		return this.#attributeAmountValue;
	}
	set amount(v: string | null) {
		if (v == null) {
			this.removeAttribute("amount");
		}else{
			this.setAttribute("amount", v);
		}
	}
	protected onAmountChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	#attributeDenomValue: string | null = null;
	get denom(): string | null {
		return this.#attributeDenomValue;
	}
	set denom(v: string | null) {
		if (v == null) {
			this.removeAttribute("denom");
		}else{
			this.setAttribute("denom", v);
		}
	}
	protected onDenomChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null) {
		switch(name) {
			case "amount":
				this.#attributeAmountValue = newValue;
				this.onAmountChanged(oldValue, newValue);
				break;
			case "denom":
				this.#attributeDenomValue = newValue;
				this.onDenomChanged(oldValue, newValue);
				break;
			default:
				// Shouldn't happen
		}
	}
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				getCourtProposalMsgMintTemplate()
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "court-proposal-msg-mint"); // allow for easy query selecting
		this.refs = new CourtProposalMsgMintRefs(this);
	}
	connectedCallback() {
		// To be overridden by child class
	}
	disconnectedCallback() {
		// To be overridden by child class
	}
	adoptedCallback() {
		// To be overridden by child class
	}
	public static registerElement() {
		customElements.define("court-proposal-msg-mint", this, { extends: "li"});
	}
}
export class CourtProposalPlaceholderRefs {
	#element: HTMLElement | ShadowRoot;
	constructor(element: HTMLElement | ShadowRoot) {
		this.#element = element;
	}
	#status?: HTMLDivElement;
	get status() {
		if (this.#status === undefined) {
			this.#status = this.#element.querySelector("[cewt-ref=\"status\"]:not(:scope [is] *)")!;
		}
		return this.#status;
	}
	#votesUser?: HTMLDivElement;
	get votesUser() {
		if (this.#votesUser === undefined) {
			this.#votesUser = this.#element.querySelector("[cewt-ref=\"votes-user\"]:not(:scope [is] *)")!;
		}
		return this.#votesUser;
	}
	#finalizeButton?: HTMLButtonElement;
	get finalizeButton() {
		if (this.#finalizeButton === undefined) {
			this.#finalizeButton = this.#element.querySelector("[cewt-ref=\"finalize-button\"]:not(:scope [is] *)")!;
		}
		return this.#finalizeButton;
	}
}
let _templateCourtProposalPlaceholder: HTMLTemplateElement | null = null;
function getCourtProposalPlaceholderTemplate(): HTMLTemplateElement {
	if (_templateCourtProposalPlaceholder == null) {
		 _templateCourtProposalPlaceholder = document.createElement("template")
		 _templateCourtProposalPlaceholder.innerHTML = "\n\t<h2>Proposal&nbsp;?? <span class=\"badge\">Unknown</span></h2>\n\t<div cewt-ref=\"status\" class=\"important-note\">\n\t\tUnknown status\n\t</div>\n\t<p>Proposed by: ????</p>\n\t<ol class=\"vote-msgs\">\n\t\t<li>Send ??? ??? to ???</li>\n\t</ol>\n\t<div class=\"important-note\" cewt-ref=\"votes-user\">\n\t\tYou didn\'t vote on this\n\t</div>\n\t<div class=\"vote-ratio-container\">\n\t\t<div class=\"vote-ratio-for\">\n\t\t\t??? (??%)\n\t\t</div>\n\t\t<div class=\"vote-ratio-against\" \"=\"\">\n\t\t\t(??%) ???\n\t\t</div>\n\t</div>\n\t<div class=\"vote-button-container\">\n\t\t<button class=\"success\">Vote for</button>\n\t\t<button class=\"danger\">Vote against</button>\n\t</div>\n\t<button class=\"primary vote-finalize-button\" cewt-ref=\"finalize-button\">Vote against</button>\n";
	}
	return _templateCourtProposalPlaceholder;
}
export class CourtProposalPlaceholderAutogen extends HTMLDivElement {
	readonly refs: CourtProposalPlaceholderRefs;
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				getCourtProposalPlaceholderTemplate()
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "court-proposal-placeholder"); // allow for easy query selecting
		this.refs = new CourtProposalPlaceholderRefs(this);
		if (!this.getAttribute("class")) {
			this.setAttribute("class", "lazy-loading-covered");
		}
	}
	connectedCallback() {
		// To be overridden by child class
	}
	disconnectedCallback() {
		// To be overridden by child class
	}
	adoptedCallback() {
		// To be overridden by child class
	}
	public static registerElement() {
		customElements.define("court-proposal-placeholder", this, { extends: "div"});
	}
}
