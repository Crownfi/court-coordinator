// auto-generated by C.E.W.T.
// DO NOT EDIT BY HAND!!
import { normalizeFormValues } from "@aritz-cracker/browser-utils";
export class StakingInputsRefs {
	#element: HTMLElement | ShadowRoot;
	constructor(element: HTMLElement | ShadowRoot) {
		this.#element = element;
	}
	#formUnstake?: HTMLFormElementKnownControls<StakingInputsFormCollection1, StakingInputsFormValues1>;
	get formUnstake() {
		if (this.#formUnstake === undefined) {
			this.#formUnstake = this.#element.querySelector("[cewt-ref=\"form-unstake\"]:not(:scope [is] *)")!;
			this.#formUnstake.values = normalizeFormValues.bind(this.#formUnstake, this.#formUnstake) as any;
		}
		return this.#formUnstake;
	}
	#stakedBalance?: HTMLSpanElement;
	get stakedBalance() {
		if (this.#stakedBalance === undefined) {
			this.#stakedBalance = this.#element.querySelector("[cewt-ref=\"staked-balance\"]:not(:scope [is] *)")!;
		}
		return this.#stakedBalance;
	}
	#stakedDenom?: HTMLSpanElement;
	get stakedDenom() {
		if (this.#stakedDenom === undefined) {
			this.#stakedDenom = this.#element.querySelector("[cewt-ref=\"staked-denom\"]:not(:scope [is] *)")!;
		}
		return this.#stakedDenom;
	}
	#formStake?: HTMLFormElementKnownControls<StakingInputsFormCollection2, StakingInputsFormValues2>;
	get formStake() {
		if (this.#formStake === undefined) {
			this.#formStake = this.#element.querySelector("[cewt-ref=\"form-stake\"]:not(:scope [is] *)")!;
			this.#formStake.values = normalizeFormValues.bind(this.#formStake, this.#formStake) as any;
		}
		return this.#formStake;
	}
	#unstakedBalance?: HTMLSpanElement;
	get unstakedBalance() {
		if (this.#unstakedBalance === undefined) {
			this.#unstakedBalance = this.#element.querySelector("[cewt-ref=\"unstaked-balance\"]:not(:scope [is] *)")!;
		}
		return this.#unstakedBalance;
	}
	#unstakedDenom?: HTMLSpanElement;
	get unstakedDenom() {
		if (this.#unstakedDenom === undefined) {
			this.#unstakedDenom = this.#element.querySelector("[cewt-ref=\"unstaked-denom\"]:not(:scope [is] *)")!;
		}
		return this.#unstakedDenom;
	}
}
let _templateStakingInputs: HTMLTemplateElement | null = null;
function getStakingInputsTemplate(): HTMLTemplateElement {
	if (_templateStakingInputs == null) {
		 _templateStakingInputs = document.createElement("template")
		 _templateStakingInputs.innerHTML = "\n\t<form cewt-ref=\"form-unstake\">\n\t\t<div class=\"trade-amount-balance\">\n\t\t\tStaked shares: <span cewt-ref=\"staked-balance\"></span>\n\t\t</div>\n\t\t<label class=\"trade-amount-input\">\n\t\t\t<input type=\"number\" min=\"1\" class=\"form-control\" name=\"amount\">\n\t\t\t<span cewt-ref=\"staked-denom\" class=\"trade-amount-denom\">Shares</span>\n\t\t</label>\n\t\t<button class=\"primary trade-execute\">Unstake</button>\n\t</form>\n\t<form cewt-ref=\"form-stake\">\n\t\t<div class=\"trade-amount-balance\">\n\t\t\tUnstaked shares: <span cewt-ref=\"unstaked-balance\"></span>\n\t\t</div>\n\t\t<label class=\"trade-amount-input\">\n\t\t\t<input type=\"number\" min=\"1\" class=\"form-control\" name=\"amount\">\n\t\t\t<span class=\"trade-amount-denom\" cewt-ref=\"unstaked-denom\">Shares</span>\n\t\t</label>\n\t\t<button class=\"primary trade-execute\">Stake</button>\n\t</form>\n";
	}
	return _templateStakingInputs;
}
export class StakingInputsAutogen extends HTMLDivElement {
	readonly refs: StakingInputsRefs;
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				getStakingInputsTemplate()
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "staking-inputs"); // allow for easy query selecting
		this.refs = new StakingInputsRefs(this);
	}
	connectedCallback() {
		// To be overridden by child class
	}
	disconnectedCallback() {
		// To be overridden by child class
	}
	adoptedCallback() {
		// To be overridden by child class
	}
	public static registerElement() {
		customElements.define("staking-inputs", this, { extends: "div"});
	}
}
export type StakingInputsFormCollection1 = HTMLFormControlsCollection & {
	"amount": HTMLInputElement;
	namedItem(name: "amount"): HTMLInputElement;
};
export type StakingInputsFormValues1 = {
	"amount": number;
};
export type StakingInputsFormCollection2 = HTMLFormControlsCollection & {
	"amount": HTMLInputElement;
	namedItem(name: "amount"): HTMLInputElement;
};
export type StakingInputsFormValues2 = {
	"amount": number;
};
interface HTMLFormElementKnownControls<C extends HTMLFormControlsCollection, V> extends HTMLFormElement {
	readonly elements: C;
	values: () => V;
};
