// auto-generated by C.E.W.T.
// DO NOT EDIT BY HAND!!
import { normalizeFormValues } from "@aritz-cracker/browser-utils";
import { TokenDisplayElement } from "@crownfi/sei-webui-utils";
export class CourtProposalsContainerRefs {
	#element: HTMLElement | ShadowRoot;
	constructor(element: HTMLElement | ShadowRoot) {
		this.#element = element;
	}
	#newProposalButton?: HTMLButtonElement;
	get newProposalButton() {
		if (this.#newProposalButton === undefined) {
			this.#newProposalButton = this.#element.querySelector("[cewt-ref=\"new-proposal-button\"]:not(:scope [is] *)")!;
		}
		return this.#newProposalButton;
	}
	#proposalSelectButton?: HTMLButtonElement;
	get proposalSelectButton() {
		if (this.#proposalSelectButton === undefined) {
			this.#proposalSelectButton = this.#element.querySelector("[cewt-ref=\"proposal-select-button\"]:not(:scope [is] *)")!;
		}
		return this.#proposalSelectButton;
	}
}
let _templateCourtProposalsContainer: HTMLTemplateElement | null = null;
function getCourtProposalsContainerTemplate(): HTMLTemplateElement {
	if (_templateCourtProposalsContainer == null) {
		 _templateCourtProposalsContainer = document.createElement("template")
		 _templateCourtProposalsContainer.innerHTML = "\n\t<div class=\"button-row\" style=\"margin: 4px;\">\n\t\t<button cewt-ref=\"new-proposal-button\" class=\"primary\">New proposal</button>\n\t\t<button cewt-ref=\"proposal-select-button\">View proposal by ID</button>\n\t</div>\n\t<div is=\"court-proposal-placeholder\"></div>\n";
	}
	return _templateCourtProposalsContainer;
}
export class CourtProposalsContainerAutogen extends HTMLDivElement {
	readonly refs: CourtProposalsContainerRefs;
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				getCourtProposalsContainerTemplate()
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "court-proposals-container"); // allow for easy query selecting
		this.refs = new CourtProposalsContainerRefs(this);
	}
	connectedCallback() {
		// To be overridden by child class
	}
	disconnectedCallback() {
		// To be overridden by child class
	}
	adoptedCallback() {
		// To be overridden by child class
	}
	public static registerElement() {
		customElements.define("court-proposals-container", this, { extends: "div"});
	}
}
export class CourtProposalRefs {
	#element: HTMLElement | ShadowRoot;
	constructor(element: HTMLElement | ShadowRoot) {
		this.#element = element;
	}
	#proposalId?: HTMLSpanElement;
	get proposalId() {
		if (this.#proposalId === undefined) {
			this.#proposalId = this.#element.querySelector("[cewt-ref=\"proposal-id\"]:not(:scope [is] *)")!;
		}
		return this.#proposalId;
	}
	#status?: HTMLDivElement;
	get status() {
		if (this.#status === undefined) {
			this.#status = this.#element.querySelector("[cewt-ref=\"status\"]:not(:scope [is] *)")!;
		}
		return this.#status;
	}
	#votesApproveTokens?: TokenDisplayElement;
	get votesApproveTokens() {
		if (this.#votesApproveTokens === undefined) {
			this.#votesApproveTokens = this.#element.querySelector("[cewt-ref=\"votes-approve-tokens\"]:not(:scope [is] *)")!;
		}
		return this.#votesApproveTokens;
	}
	#votesApprovePercent?: HTMLSpanElement;
	get votesApprovePercent() {
		if (this.#votesApprovePercent === undefined) {
			this.#votesApprovePercent = this.#element.querySelector("[cewt-ref=\"votes-approve-percent\"]:not(:scope [is] *)")!;
		}
		return this.#votesApprovePercent;
	}
	#votesOpposeTokens?: TokenDisplayElement;
	get votesOpposeTokens() {
		if (this.#votesOpposeTokens === undefined) {
			this.#votesOpposeTokens = this.#element.querySelector("[cewt-ref=\"votes-oppose-tokens\"]:not(:scope [is] *)")!;
		}
		return this.#votesOpposeTokens;
	}
	#votesOpposePercent?: HTMLSpanElement;
	get votesOpposePercent() {
		if (this.#votesOpposePercent === undefined) {
			this.#votesOpposePercent = this.#element.querySelector("[cewt-ref=\"votes-oppose-percent\"]:not(:scope [is] *)")!;
		}
		return this.#votesOpposePercent;
	}
	#votesAbstainTokens?: TokenDisplayElement;
	get votesAbstainTokens() {
		if (this.#votesAbstainTokens === undefined) {
			this.#votesAbstainTokens = this.#element.querySelector("[cewt-ref=\"votes-abstain-tokens\"]:not(:scope [is] *)")!;
		}
		return this.#votesAbstainTokens;
	}
	#votesAbstainPercent?: HTMLSpanElement;
	get votesAbstainPercent() {
		if (this.#votesAbstainPercent === undefined) {
			this.#votesAbstainPercent = this.#element.querySelector("[cewt-ref=\"votes-abstain-percent\"]:not(:scope [is] *)")!;
		}
		return this.#votesAbstainPercent;
	}
	#voterTurnoutContainer?: HTMLDivElement;
	get voterTurnoutContainer() {
		if (this.#voterTurnoutContainer === undefined) {
			this.#voterTurnoutContainer = this.#element.querySelector("[cewt-ref=\"voter-turnout-container\"]:not(:scope [is] *)")!;
		}
		return this.#voterTurnoutContainer;
	}
	#votesTurnoutTokens?: TokenDisplayElement;
	get votesTurnoutTokens() {
		if (this.#votesTurnoutTokens === undefined) {
			this.#votesTurnoutTokens = this.#element.querySelector("[cewt-ref=\"votes-turnout-tokens\"]:not(:scope [is] *)")!;
		}
		return this.#votesTurnoutTokens;
	}
	#votesTurnoutNeededTokens?: TokenDisplayElement;
	get votesTurnoutNeededTokens() {
		if (this.#votesTurnoutNeededTokens === undefined) {
			this.#votesTurnoutNeededTokens = this.#element.querySelector("[cewt-ref=\"votes-turnout-needed-tokens\"]:not(:scope [is] *)")!;
		}
		return this.#votesTurnoutNeededTokens;
	}
	#votesTurnoutProgress?: HTMLElement;
	get votesTurnoutProgress() {
		if (this.#votesTurnoutProgress === undefined) {
			this.#votesTurnoutProgress = this.#element.querySelector("[cewt-ref=\"votes-turnout-progress\"]:not(:scope [is] *)")!;
		}
		return this.#votesTurnoutProgress;
	}
	#approvalRatingContainer?: HTMLDivElement;
	get approvalRatingContainer() {
		if (this.#approvalRatingContainer === undefined) {
			this.#approvalRatingContainer = this.#element.querySelector("[cewt-ref=\"approval-rating-container\"]:not(:scope [is] *)")!;
		}
		return this.#approvalRatingContainer;
	}
	#approvalRatingPercent?: HTMLSpanElement;
	get approvalRatingPercent() {
		if (this.#approvalRatingPercent === undefined) {
			this.#approvalRatingPercent = this.#element.querySelector("[cewt-ref=\"approval-rating-percent\"]:not(:scope [is] *)")!;
		}
		return this.#approvalRatingPercent;
	}
	#approvalRatingPercentNeeded?: HTMLSpanElement;
	get approvalRatingPercentNeeded() {
		if (this.#approvalRatingPercentNeeded === undefined) {
			this.#approvalRatingPercentNeeded = this.#element.querySelector("[cewt-ref=\"approval-rating-percent-needed\"]:not(:scope [is] *)")!;
		}
		return this.#approvalRatingPercentNeeded;
	}
	#approvalRatingProgress?: HTMLElement;
	get approvalRatingProgress() {
		if (this.#approvalRatingProgress === undefined) {
			this.#approvalRatingProgress = this.#element.querySelector("[cewt-ref=\"approval-rating-progress\"]:not(:scope [is] *)")!;
		}
		return this.#approvalRatingProgress;
	}
	#voterDetailsButton?: HTMLButtonElement;
	get voterDetailsButton() {
		if (this.#voterDetailsButton === undefined) {
			this.#voterDetailsButton = this.#element.querySelector("[cewt-ref=\"voter-details-button\"]:not(:scope [is] *)")!;
		}
		return this.#voterDetailsButton;
	}
	#msgList?: HTMLOListElement;
	get msgList() {
		if (this.#msgList === undefined) {
			this.#msgList = this.#element.querySelector("[cewt-ref=\"msg-list\"]:not(:scope [is] *)")!;
		}
		return this.#msgList;
	}
	#userVotingTokens?: TokenDisplayElement;
	get userVotingTokens() {
		if (this.#userVotingTokens === undefined) {
			this.#userVotingTokens = this.#element.querySelector("[cewt-ref=\"user-voting-tokens\"]:not(:scope [is] *)")!;
		}
		return this.#userVotingTokens;
	}
	#userStakedTokens?: TokenDisplayElement;
	get userStakedTokens() {
		if (this.#userStakedTokens === undefined) {
			this.#userStakedTokens = this.#element.querySelector("[cewt-ref=\"user-staked-tokens\"]:not(:scope [is] *)")!;
		}
		return this.#userStakedTokens;
	}
	#userVoteForm?: HTMLFormElementKnownControls<CourtProposalFormCollection1, CourtProposalFormValues1>;
	get userVoteForm() {
		if (this.#userVoteForm === undefined) {
			this.#userVoteForm = this.#element.querySelector("[cewt-ref=\"user-vote-form\"]:not(:scope [is] *)")!;
			this.#userVoteForm.values = normalizeFormValues.bind(this.#userVoteForm, this.#userVoteForm) as any;
		}
		return this.#userVoteForm;
	}
	#executeButton?: HTMLButtonElement;
	get executeButton() {
		if (this.#executeButton === undefined) {
			this.#executeButton = this.#element.querySelector("[cewt-ref=\"execute-button\"]:not(:scope [is] *)")!;
		}
		return this.#executeButton;
	}
}
let _templateCourtProposal: HTMLTemplateElement | null = null;
function getCourtProposalTemplate(): HTMLTemplateElement {
	if (_templateCourtProposal == null) {
		 _templateCourtProposal = document.createElement("template")
		 _templateCourtProposal.innerHTML = "\n\t<h2>Proposal&nbsp;<span cewt-ref=\"proposal-id\">??</span></h2>\n\t<div class=\"important-note\" cewt-ref=\"status\">\n\t\tUnknown status\n\t</div>\n\t<hr class=\"pattern-stretch\">\n\t<div class=\"votes-breakdown\">\n\t\t<div class=\"important-note success\">\n\t\t\t<span cewt-ref=\"votes-approve-tokens\" is=\"token-display\"></span> approve (<span cewt-ref=\"votes-approve-percent\">0</span>%)\n\t\t</div>\n\t\t<div class=\"important-note danger\">\n\t\t\t<span cewt-ref=\"votes-oppose-tokens\" is=\"token-display\"></span> oppose (<span cewt-ref=\"votes-oppose-percent\">0</span>%)\n\t\t</div>\n\t\t<div class=\"important-note\">\n\t\t\t<span cewt-ref=\"votes-abstain-tokens\" is=\"token-display\"></span> abstain (<span cewt-ref=\"votes-abstain-percent\">0</span>%)\n\t\t</div>\n\t</div>\n\t<div class=\"important-note\" cewt-ref=\"voter-turnout-container\">\n\t\tTotal votes: <span cewt-ref=\"votes-turnout-tokens\" is=\"token-display\"></span>\n\t\t<span class=\"hide-if-refs-empty\"><br>(Minimum of <span cewt-ref=\"votes-turnout-needed-tokens\" is=\"token-display\"></span> required)</span>\n\t</div>\n\t<progress-stacked cewt-ref=\"votes-turnout-progress\" style=\"width: 100%;\">\n\n\t</progress-stacked>\n\t<div class=\"important-note\" cewt-ref=\"approval-rating-container\">\n\t\tApproval rating: <span cewt-ref=\"approval-rating-percent\">0</span>%\n\t\t<span class=\"hide-if-refs-empty\">(Minimum of <span cewt-ref=\"approval-rating-percent-needed\">0</span>% required)</span>\n\t</div>\n\t<progress-stacked cewt-ref=\"approval-rating-progress\" style=\"width: 100%;\">\n\n\t</progress-stacked>\n\t<button cewt-ref=\"voter-details-button\" style=\"display: block; margin: auto;\" class=\"small\">Voter details</button>\n\t<hr class=\"pattern-stretch\">\n\t<ol start=\"0\" class=\"vote-msgs\" cewt-ref=\"msg-list\">\n\n\t</ol>\n\t<hr class=\"pattern-stretch\">\n\t<div class=\"important-note hide-if-refs-empty\">\n\t\tYou voted with <span cewt-ref=\"user-voting-tokens\" is=\"token-display\">0</span><span class=\"hide-if-refs-empty\"> of your staked <span cewt-ref=\"user-staked-tokens\" is=\"token-display\"></span></span> in this proposal.\n\t</div>\n\t<form cewt-ref=\"user-vote-form\" class=\"fantasy-input-group\">\n\t\t<label class=\"button fantasy success\"><span>Approve</span><input name=\"vote\" type=\"radio\" value=\"approve\"></label>\n\t\t<label class=\"button fantasy danger\"><span>Oppose</span><input name=\"vote\" type=\"radio\" value=\"oppose\"></label>\n\t\t<label class=\"button fantasy warning\"><span>Abstain</span><input name=\"vote\" type=\"radio\" value=\"abstain\"></label>\n\t</form>\n\t<button class=\"primary fantasy-ornamental vote-finalize-button\" cewt-ref=\"execute-button\">Execute proposal</button>\n";
	}
	return _templateCourtProposal;
}
export class CourtProposalAutogen extends HTMLDivElement {
	readonly refs: CourtProposalRefs;
	static get observedAttributes() {
		return ["proposal-id"];
	}
	#attributeProposalIdValue: string | null = null;
	get proposalId(): string | null {
		return this.#attributeProposalIdValue;
	}
	set proposalId(v: string | null) {
		if (v == null) {
			this.removeAttribute("proposal-id");
		}else{
			this.setAttribute("proposal-id", v);
		}
	}
	protected onProposalIdChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null) {
		switch(name) {
			case "proposal-id":
				this.#attributeProposalIdValue = newValue;
				this.onProposalIdChanged(oldValue, newValue);
				break;
			default:
				// Shouldn't happen
		}
	}
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				getCourtProposalTemplate()
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "court-proposal"); // allow for easy query selecting
		this.refs = new CourtProposalRefs(this);
	}
	connectedCallback() {
		// To be overridden by child class
	}
	disconnectedCallback() {
		// To be overridden by child class
	}
	adoptedCallback() {
		// To be overridden by child class
	}
	public static registerElement() {
		customElements.define("court-proposal", this, { extends: "div"});
	}
}
export class CourtProposalMsgSendCoinRefs {
	#element: HTMLElement | ShadowRoot;
	constructor(element: HTMLElement | ShadowRoot) {
		this.#element = element;
	}
	#tokenDisplay?: TokenDisplayElement;
	get tokenDisplay() {
		if (this.#tokenDisplay === undefined) {
			this.#tokenDisplay = this.#element.querySelector("[cewt-ref=\"token-display\"]:not(:scope [is] *)")!;
		}
		return this.#tokenDisplay;
	}
	#recipient?: HTMLSpanElement;
	get recipient() {
		if (this.#recipient === undefined) {
			this.#recipient = this.#element.querySelector("[cewt-ref=\"recipient\"]:not(:scope [is] *)")!;
		}
		return this.#recipient;
	}
}
let _templateCourtProposalMsgSendCoin: HTMLTemplateElement | null = null;
function getCourtProposalMsgSendCoinTemplate(): HTMLTemplateElement {
	if (_templateCourtProposalMsgSendCoin == null) {
		 _templateCourtProposalMsgSendCoin = document.createElement("template")
		 _templateCourtProposalMsgSendCoin.innerHTML = "\n\tSend <span cewt-ref=\"token-display\" is=\"token-display\"></span> to <span cewt-ref=\"recipient\">???</span>\n";
	}
	return _templateCourtProposalMsgSendCoin;
}
export class CourtProposalMsgSendCoinAutogen extends HTMLLIElement {
	readonly refs: CourtProposalMsgSendCoinRefs;
	static get observedAttributes() {
		return ["coin-amount", "denom", "recipient"];
	}
	#attributeCoinAmountValue: string | null = null;
	get coinAmount(): string | null {
		return this.#attributeCoinAmountValue;
	}
	set coinAmount(v: string | null) {
		if (v == null) {
			this.removeAttribute("coin-amount");
		}else{
			this.setAttribute("coin-amount", v);
		}
	}
	protected onCoinAmountChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	#attributeDenomValue: string | null = null;
	get denom(): string | null {
		return this.#attributeDenomValue;
	}
	set denom(v: string | null) {
		if (v == null) {
			this.removeAttribute("denom");
		}else{
			this.setAttribute("denom", v);
		}
	}
	protected onDenomChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	#attributeRecipientValue: string | null = null;
	get recipient(): string | null {
		return this.#attributeRecipientValue;
	}
	set recipient(v: string | null) {
		if (v == null) {
			this.removeAttribute("recipient");
		}else{
			this.setAttribute("recipient", v);
		}
	}
	protected onRecipientChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null) {
		switch(name) {
			case "coin-amount":
				this.#attributeCoinAmountValue = newValue;
				this.onCoinAmountChanged(oldValue, newValue);
				break;
			case "denom":
				this.#attributeDenomValue = newValue;
				this.onDenomChanged(oldValue, newValue);
				break;
			case "recipient":
				this.#attributeRecipientValue = newValue;
				this.onRecipientChanged(oldValue, newValue);
				break;
			default:
				// Shouldn't happen
		}
	}
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				getCourtProposalMsgSendCoinTemplate()
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "court-proposal-msg-send-coin"); // allow for easy query selecting
		this.refs = new CourtProposalMsgSendCoinRefs(this);
	}
	connectedCallback() {
		// To be overridden by child class
	}
	disconnectedCallback() {
		// To be overridden by child class
	}
	adoptedCallback() {
		// To be overridden by child class
	}
	public static registerElement() {
		customElements.define("court-proposal-msg-send-coin", this, { extends: "li"});
	}
}
export class CourtProposalMsgWasmExecRefs {
	#element: HTMLElement | ShadowRoot;
	constructor(element: HTMLElement | ShadowRoot) {
		this.#element = element;
	}
	#contract?: HTMLSpanElement;
	get contract() {
		if (this.#contract === undefined) {
			this.#contract = this.#element.querySelector("[cewt-ref=\"contract\"]:not(:scope [is] *)")!;
		}
		return this.#contract;
	}
	#list?: HTMLUListElement;
	get list() {
		if (this.#list === undefined) {
			this.#list = this.#element.querySelector("[cewt-ref=\"list\"]:not(:scope [is] *)")!;
		}
		return this.#list;
	}
}
let _templateCourtProposalMsgWasmExec: HTMLTemplateElement | null = null;
function getCourtProposalMsgWasmExecTemplate(): HTMLTemplateElement {
	if (_templateCourtProposalMsgWasmExec == null) {
		 _templateCourtProposalMsgWasmExec = document.createElement("template")
		 _templateCourtProposalMsgWasmExec.innerHTML = "\n\tExecute WASM contract <span cewt-ref=\"contract\">???</span> <br>\n\t<ul cewt-ref=\"list\"></ul>\n";
	}
	return _templateCourtProposalMsgWasmExec;
}
export class CourtProposalMsgWasmExecAutogen extends HTMLLIElement {
	readonly refs: CourtProposalMsgWasmExecRefs;
	static get observedAttributes() {
		return ["contract", "funds", "payload"];
	}
	#attributeContractValue: string | null = null;
	get contract(): string | null {
		return this.#attributeContractValue;
	}
	set contract(v: string | null) {
		if (v == null) {
			this.removeAttribute("contract");
		}else{
			this.setAttribute("contract", v);
		}
	}
	protected onContractChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	#attributeFundsValue: string | null = null;
	get funds(): string | null {
		return this.#attributeFundsValue;
	}
	set funds(v: string | null) {
		if (v == null) {
			this.removeAttribute("funds");
		}else{
			this.setAttribute("funds", v);
		}
	}
	protected onFundsChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	#attributePayloadValue: string | null = null;
	get payload(): string | null {
		return this.#attributePayloadValue;
	}
	set payload(v: string | null) {
		if (v == null) {
			this.removeAttribute("payload");
		}else{
			this.setAttribute("payload", v);
		}
	}
	protected onPayloadChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null) {
		switch(name) {
			case "contract":
				this.#attributeContractValue = newValue;
				this.onContractChanged(oldValue, newValue);
				break;
			case "funds":
				this.#attributeFundsValue = newValue;
				this.onFundsChanged(oldValue, newValue);
				break;
			case "payload":
				this.#attributePayloadValue = newValue;
				this.onPayloadChanged(oldValue, newValue);
				break;
			default:
				// Shouldn't happen
		}
	}
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				getCourtProposalMsgWasmExecTemplate()
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "court-proposal-msg-wasm-exec"); // allow for easy query selecting
		this.refs = new CourtProposalMsgWasmExecRefs(this);
	}
	connectedCallback() {
		// To be overridden by child class
	}
	disconnectedCallback() {
		// To be overridden by child class
	}
	adoptedCallback() {
		// To be overridden by child class
	}
	public static registerElement() {
		customElements.define("court-proposal-msg-wasm-exec", this, { extends: "li"});
	}
}
export class CourtProposalMsgEvmExecRefs {
	#element: HTMLElement | ShadowRoot;
	constructor(element: HTMLElement | ShadowRoot) {
		this.#element = element;
	}
	#contract?: HTMLSpanElement;
	get contract() {
		if (this.#contract === undefined) {
			this.#contract = this.#element.querySelector("[cewt-ref=\"contract\"]:not(:scope [is] *)")!;
		}
		return this.#contract;
	}
	#list?: HTMLUListElement;
	get list() {
		if (this.#list === undefined) {
			this.#list = this.#element.querySelector("[cewt-ref=\"list\"]:not(:scope [is] *)")!;
		}
		return this.#list;
	}
}
let _templateCourtProposalMsgEvmExec: HTMLTemplateElement | null = null;
function getCourtProposalMsgEvmExecTemplate(): HTMLTemplateElement {
	if (_templateCourtProposalMsgEvmExec == null) {
		 _templateCourtProposalMsgEvmExec = document.createElement("template")
		 _templateCourtProposalMsgEvmExec.innerHTML = "\n\tExecute EVM contract <span cewt-ref=\"contract\">???</span> <br>\n\t<ul cewt-ref=\"list\"></ul>\n";
	}
	return _templateCourtProposalMsgEvmExec;
}
export class CourtProposalMsgEvmExecAutogen extends HTMLLIElement {
	readonly refs: CourtProposalMsgEvmExecRefs;
	static get observedAttributes() {
		return ["asei-amount", "contract", "payload"];
	}
	#attributeAseiAmountValue: string | null = null;
	get aseiAmount(): string | null {
		return this.#attributeAseiAmountValue;
	}
	set aseiAmount(v: string | null) {
		if (v == null) {
			this.removeAttribute("asei-amount");
		}else{
			this.setAttribute("asei-amount", v);
		}
	}
	protected onAseiAmountChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	#attributeContractValue: string | null = null;
	get contract(): string | null {
		return this.#attributeContractValue;
	}
	set contract(v: string | null) {
		if (v == null) {
			this.removeAttribute("contract");
		}else{
			this.setAttribute("contract", v);
		}
	}
	protected onContractChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	#attributePayloadValue: string | null = null;
	get payload(): string | null {
		return this.#attributePayloadValue;
	}
	set payload(v: string | null) {
		if (v == null) {
			this.removeAttribute("payload");
		}else{
			this.setAttribute("payload", v);
		}
	}
	protected onPayloadChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null) {
		switch(name) {
			case "asei-amount":
				this.#attributeAseiAmountValue = newValue;
				this.onAseiAmountChanged(oldValue, newValue);
				break;
			case "contract":
				this.#attributeContractValue = newValue;
				this.onContractChanged(oldValue, newValue);
				break;
			case "payload":
				this.#attributePayloadValue = newValue;
				this.onPayloadChanged(oldValue, newValue);
				break;
			default:
				// Shouldn't happen
		}
	}
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				getCourtProposalMsgEvmExecTemplate()
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "court-proposal-msg-evm-exec"); // allow for easy query selecting
		this.refs = new CourtProposalMsgEvmExecRefs(this);
	}
	connectedCallback() {
		// To be overridden by child class
	}
	disconnectedCallback() {
		// To be overridden by child class
	}
	adoptedCallback() {
		// To be overridden by child class
	}
	public static registerElement() {
		customElements.define("court-proposal-msg-evm-exec", this, { extends: "li"});
	}
}
export class CourtProposalMsgWasmUpgradeRefs {
	#element: HTMLElement | ShadowRoot;
	constructor(element: HTMLElement | ShadowRoot) {
		this.#element = element;
	}
	#contract?: HTMLSpanElement;
	get contract() {
		if (this.#contract === undefined) {
			this.#contract = this.#element.querySelector("[cewt-ref=\"contract\"]:not(:scope [is] *)")!;
		}
		return this.#contract;
	}
	#codeId?: HTMLSpanElement;
	get codeId() {
		if (this.#codeId === undefined) {
			this.#codeId = this.#element.querySelector("[cewt-ref=\"code-id\"]:not(:scope [is] *)")!;
		}
		return this.#codeId;
	}
	#payload?: HTMLPreElement;
	get payload() {
		if (this.#payload === undefined) {
			this.#payload = this.#element.querySelector("[cewt-ref=\"payload\"]:not(:scope [is] *)")!;
		}
		return this.#payload;
	}
}
let _templateCourtProposalMsgWasmUpgrade: HTMLTemplateElement | null = null;
function getCourtProposalMsgWasmUpgradeTemplate(): HTMLTemplateElement {
	if (_templateCourtProposalMsgWasmUpgrade == null) {
		 _templateCourtProposalMsgWasmUpgrade = document.createElement("template")
		 _templateCourtProposalMsgWasmUpgrade.innerHTML = "\n\tUpgrade <span cewt-ref=\"contract\">???</span> to code ID <span cewt-ref=\"code-id\">???</span>\n\t<pre cewt-ref=\"payload\"></pre>\n";
	}
	return _templateCourtProposalMsgWasmUpgrade;
}
export class CourtProposalMsgWasmUpgradeAutogen extends HTMLLIElement {
	readonly refs: CourtProposalMsgWasmUpgradeRefs;
	static get observedAttributes() {
		return ["code-id", "contract", "payload"];
	}
	#attributeCodeIdValue: string | null = null;
	get codeId(): string | null {
		return this.#attributeCodeIdValue;
	}
	set codeId(v: string | null) {
		if (v == null) {
			this.removeAttribute("code-id");
		}else{
			this.setAttribute("code-id", v);
		}
	}
	protected onCodeIdChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	#attributeContractValue: string | null = null;
	get contract(): string | null {
		return this.#attributeContractValue;
	}
	set contract(v: string | null) {
		if (v == null) {
			this.removeAttribute("contract");
		}else{
			this.setAttribute("contract", v);
		}
	}
	protected onContractChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	#attributePayloadValue: string | null = null;
	get payload(): string | null {
		return this.#attributePayloadValue;
	}
	set payload(v: string | null) {
		if (v == null) {
			this.removeAttribute("payload");
		}else{
			this.setAttribute("payload", v);
		}
	}
	protected onPayloadChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null) {
		switch(name) {
			case "code-id":
				this.#attributeCodeIdValue = newValue;
				this.onCodeIdChanged(oldValue, newValue);
				break;
			case "contract":
				this.#attributeContractValue = newValue;
				this.onContractChanged(oldValue, newValue);
				break;
			case "payload":
				this.#attributePayloadValue = newValue;
				this.onPayloadChanged(oldValue, newValue);
				break;
			default:
				// Shouldn't happen
		}
	}
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				getCourtProposalMsgWasmUpgradeTemplate()
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "court-proposal-msg-wasm-upgrade"); // allow for easy query selecting
		this.refs = new CourtProposalMsgWasmUpgradeRefs(this);
	}
	connectedCallback() {
		// To be overridden by child class
	}
	disconnectedCallback() {
		// To be overridden by child class
	}
	adoptedCallback() {
		// To be overridden by child class
	}
	public static registerElement() {
		customElements.define("court-proposal-msg-wasm-upgrade", this, { extends: "li"});
	}
}
export class CourtProposalMsgWasmChAdminRefs {
	#element: HTMLElement | ShadowRoot;
	constructor(element: HTMLElement | ShadowRoot) {
		this.#element = element;
	}
	#contract?: HTMLSpanElement;
	get contract() {
		if (this.#contract === undefined) {
			this.#contract = this.#element.querySelector("[cewt-ref=\"contract\"]:not(:scope [is] *)")!;
		}
		return this.#contract;
	}
	#admin?: HTMLSpanElement;
	get admin() {
		if (this.#admin === undefined) {
			this.#admin = this.#element.querySelector("[cewt-ref=\"admin\"]:not(:scope [is] *)")!;
		}
		return this.#admin;
	}
}
let _templateCourtProposalMsgWasmChAdmin: HTMLTemplateElement | null = null;
function getCourtProposalMsgWasmChAdminTemplate(): HTMLTemplateElement {
	if (_templateCourtProposalMsgWasmChAdmin == null) {
		 _templateCourtProposalMsgWasmChAdmin = document.createElement("template")
		 _templateCourtProposalMsgWasmChAdmin.innerHTML = "\n\tSet upgrade admin for <span cewt-ref=\"contract\">???</span> to <span cewt-ref=\"admin\">???</span>\n";
	}
	return _templateCourtProposalMsgWasmChAdmin;
}
export class CourtProposalMsgWasmChAdminAutogen extends HTMLLIElement {
	readonly refs: CourtProposalMsgWasmChAdminRefs;
	static get observedAttributes() {
		return ["admin", "contract"];
	}
	#attributeAdminValue: string | null = null;
	get admin(): string | null {
		return this.#attributeAdminValue;
	}
	set admin(v: string | null) {
		if (v == null) {
			this.removeAttribute("admin");
		}else{
			this.setAttribute("admin", v);
		}
	}
	protected onAdminChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	#attributeContractValue: string | null = null;
	get contract(): string | null {
		return this.#attributeContractValue;
	}
	set contract(v: string | null) {
		if (v == null) {
			this.removeAttribute("contract");
		}else{
			this.setAttribute("contract", v);
		}
	}
	protected onContractChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null) {
		switch(name) {
			case "admin":
				this.#attributeAdminValue = newValue;
				this.onAdminChanged(oldValue, newValue);
				break;
			case "contract":
				this.#attributeContractValue = newValue;
				this.onContractChanged(oldValue, newValue);
				break;
			default:
				// Shouldn't happen
		}
	}
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				getCourtProposalMsgWasmChAdminTemplate()
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "court-proposal-msg-wasm-ch-admin"); // allow for easy query selecting
		this.refs = new CourtProposalMsgWasmChAdminRefs(this);
	}
	connectedCallback() {
		// To be overridden by child class
	}
	disconnectedCallback() {
		// To be overridden by child class
	}
	adoptedCallback() {
		// To be overridden by child class
	}
	public static registerElement() {
		customElements.define("court-proposal-msg-wasm-ch-admin", this, { extends: "li"});
	}
}
export class CourtProposalMsgWasmClAdminRefs {
	#element: HTMLElement | ShadowRoot;
	constructor(element: HTMLElement | ShadowRoot) {
		this.#element = element;
	}
	#contract?: HTMLSpanElement;
	get contract() {
		if (this.#contract === undefined) {
			this.#contract = this.#element.querySelector("[cewt-ref=\"contract\"]:not(:scope [is] *)")!;
		}
		return this.#contract;
	}
}
let _templateCourtProposalMsgWasmClAdmin: HTMLTemplateElement | null = null;
function getCourtProposalMsgWasmClAdminTemplate(): HTMLTemplateElement {
	if (_templateCourtProposalMsgWasmClAdmin == null) {
		 _templateCourtProposalMsgWasmClAdmin = document.createElement("template")
		 _templateCourtProposalMsgWasmClAdmin.innerHTML = "\n\tClear upgrade admin for <span cewt-ref=\"contract\">???</span>\n";
	}
	return _templateCourtProposalMsgWasmClAdmin;
}
export class CourtProposalMsgWasmClAdminAutogen extends HTMLLIElement {
	readonly refs: CourtProposalMsgWasmClAdminRefs;
	static get observedAttributes() {
		return ["contract"];
	}
	#attributeContractValue: string | null = null;
	get contract(): string | null {
		return this.#attributeContractValue;
	}
	set contract(v: string | null) {
		if (v == null) {
			this.removeAttribute("contract");
		}else{
			this.setAttribute("contract", v);
		}
	}
	protected onContractChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null) {
		switch(name) {
			case "contract":
				this.#attributeContractValue = newValue;
				this.onContractChanged(oldValue, newValue);
				break;
			default:
				// Shouldn't happen
		}
	}
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				getCourtProposalMsgWasmClAdminTemplate()
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "court-proposal-msg-wasm-cl-admin"); // allow for easy query selecting
		this.refs = new CourtProposalMsgWasmClAdminRefs(this);
	}
	connectedCallback() {
		// To be overridden by child class
	}
	disconnectedCallback() {
		// To be overridden by child class
	}
	adoptedCallback() {
		// To be overridden by child class
	}
	public static registerElement() {
		customElements.define("court-proposal-msg-wasm-cl-admin", this, { extends: "li"});
	}
}
export class CourtProposalMsgMintRefs {
	#element: HTMLElement | ShadowRoot;
	constructor(element: HTMLElement | ShadowRoot) {
		this.#element = element;
	}
	#tokenDisplay?: TokenDisplayElement;
	get tokenDisplay() {
		if (this.#tokenDisplay === undefined) {
			this.#tokenDisplay = this.#element.querySelector("[cewt-ref=\"token-display\"]:not(:scope [is] *)")!;
		}
		return this.#tokenDisplay;
	}
}
let _templateCourtProposalMsgMint: HTMLTemplateElement | null = null;
function getCourtProposalMsgMintTemplate(): HTMLTemplateElement {
	if (_templateCourtProposalMsgMint == null) {
		 _templateCourtProposalMsgMint = document.createElement("template")
		 _templateCourtProposalMsgMint.innerHTML = "\n\tMint <span cewt-ref=\"token-display\" is=\"token-display\"></span>\n";
	}
	return _templateCourtProposalMsgMint;
}
export class CourtProposalMsgMintAutogen extends HTMLLIElement {
	readonly refs: CourtProposalMsgMintRefs;
	static get observedAttributes() {
		return ["amount", "denom"];
	}
	#attributeAmountValue: string | null = null;
	get amount(): string | null {
		return this.#attributeAmountValue;
	}
	set amount(v: string | null) {
		if (v == null) {
			this.removeAttribute("amount");
		}else{
			this.setAttribute("amount", v);
		}
	}
	protected onAmountChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	#attributeDenomValue: string | null = null;
	get denom(): string | null {
		return this.#attributeDenomValue;
	}
	set denom(v: string | null) {
		if (v == null) {
			this.removeAttribute("denom");
		}else{
			this.setAttribute("denom", v);
		}
	}
	protected onDenomChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null) {
		switch(name) {
			case "amount":
				this.#attributeAmountValue = newValue;
				this.onAmountChanged(oldValue, newValue);
				break;
			case "denom":
				this.#attributeDenomValue = newValue;
				this.onDenomChanged(oldValue, newValue);
				break;
			default:
				// Shouldn't happen
		}
	}
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				getCourtProposalMsgMintTemplate()
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "court-proposal-msg-mint"); // allow for easy query selecting
		this.refs = new CourtProposalMsgMintRefs(this);
	}
	connectedCallback() {
		// To be overridden by child class
	}
	disconnectedCallback() {
		// To be overridden by child class
	}
	adoptedCallback() {
		// To be overridden by child class
	}
	public static registerElement() {
		customElements.define("court-proposal-msg-mint", this, { extends: "li"});
	}
}
export class CourtProposalPlaceholderRefs {
	#element: HTMLElement | ShadowRoot;
	constructor(element: HTMLElement | ShadowRoot) {
		this.#element = element;
	}
}
let _templateCourtProposalPlaceholder: HTMLTemplateElement | null = null;
function getCourtProposalPlaceholderTemplate(): HTMLTemplateElement {
	if (_templateCourtProposalPlaceholder == null) {
		 _templateCourtProposalPlaceholder = document.createElement("template")
		 _templateCourtProposalPlaceholder.innerHTML = "\n\t<h2>Proposal&nbsp;??</h2>\n\t<div class=\"important-note\">\n\t\tUnknown status\n\t</div>\n\t<hr>\n\t<div class=\"votes-breakdown\">\n\t\t<div class=\"important-note success\">\n\t\t\t?? approval votes (??%)\n\t\t</div>\n\t\t<div class=\"important-note danger\">\n\t\t\t?? opposing votes (??%)\n\t\t</div>\n\t\t<div class=\"important-note\">\n\t\t\t?? abstain votes (??%)\n\t\t</div>\n\t</div>\n\t<div class=\"important-note\">\n\t\tTotal votes: ????<br>\n\t\t(Minimum of ???? required)\n\t</div>\n\t<progress-stacked style=\"width: 100%;\"></progress-stacked>\n\t<div class=\"important-note\">\n\t\tApproval rating: ??%\n\t\t(Minimum of ??% required)\n\t</div>\n\t<progress-stacked style=\"width: 100%;\"></progress-stacked>\n\t<button style=\"display: block; margin: auto;\" class=\"small\">Voter details</button>\n\t<hr>\n\t<ol start=\"0\" class=\"vote-msgs\">\n\t\t<li>Wait for the proposal to load</li>\n\t</ol>\n\t<div class=\"important-note\">\n\t\tYou\'ve used ????/???? of your votes\n\t</div>\n\t<form style=\"display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap;\">\n\t\t<label class=\"button success\">Approve<input name=\"vote\" type=\"radio\" value=\"approve\"></label>\n\t\t<label class=\"button danger\">Oppose<input name=\"vote\" type=\"radio\" value=\"oppose\"></label>\n\t\t<label class=\"button warning\">Abstain<input name=\"vote\" type=\"radio\" value=\"abstain\"></label>\n\t</form>\n\t<button class=\"primary vote-finalize-button\">Execute proposal</button>\n";
	}
	return _templateCourtProposalPlaceholder;
}
export class CourtProposalPlaceholderAutogen extends HTMLDivElement {
	readonly refs: CourtProposalPlaceholderRefs;
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				getCourtProposalPlaceholderTemplate()
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "court-proposal-placeholder"); // allow for easy query selecting
		this.refs = new CourtProposalPlaceholderRefs(this);
	}
	connectedCallback() {
		// To be overridden by child class
	}
	disconnectedCallback() {
		// To be overridden by child class
	}
	adoptedCallback() {
		// To be overridden by child class
	}
	public static registerElement() {
		customElements.define("court-proposal-placeholder", this, { extends: "div"});
	}
}
export class CourtProposalVoteDetailsRefs {
	#element: HTMLElement | ShadowRoot;
	constructor(element: HTMLElement | ShadowRoot) {
		this.#element = element;
	}
	#proposalId?: HTMLSpanElement;
	get proposalId() {
		if (this.#proposalId === undefined) {
			this.#proposalId = this.#element.querySelector("[cewt-ref=\"proposal-id\"]:not(:scope [is] *)")!;
		}
		return this.#proposalId;
	}
	#voteList?: HTMLUListElement;
	get voteList() {
		if (this.#voteList === undefined) {
			this.#voteList = this.#element.querySelector("[cewt-ref=\"vote-list\"]:not(:scope [is] *)")!;
		}
		return this.#voteList;
	}
	#closeButton?: HTMLButtonElement;
	get closeButton() {
		if (this.#closeButton === undefined) {
			this.#closeButton = this.#element.querySelector("[cewt-ref=\"close-button\"]:not(:scope [is] *)")!;
		}
		return this.#closeButton;
	}
}
let _templateCourtProposalVoteDetails: HTMLTemplateElement | null = null;
function getCourtProposalVoteDetailsTemplate(): HTMLTemplateElement {
	if (_templateCourtProposalVoteDetails == null) {
		 _templateCourtProposalVoteDetails = document.createElement("template")
		 _templateCourtProposalVoteDetails.innerHTML = "\n\t<h1>Votes for proposal <span cewt-ref=\"proposal-id\">#</span></h1>\n\t<ul cewt-ref=\"vote-list\"></ul>\n\t<button style=\"display: block; margin: auto;\" cewt-ref=\"close-button\" class=\"small\">Close</button>\n";
	}
	return _templateCourtProposalVoteDetails;
}
export class CourtProposalVoteDetailsAutogen extends HTMLDialogElement {
	readonly refs: CourtProposalVoteDetailsRefs;
	static get observedAttributes() {
		return ["proposal-id"];
	}
	#attributeProposalIdValue: string | null = null;
	get proposalId(): string | null {
		return this.#attributeProposalIdValue;
	}
	set proposalId(v: string | null) {
		if (v == null) {
			this.removeAttribute("proposal-id");
		}else{
			this.setAttribute("proposal-id", v);
		}
	}
	protected onProposalIdChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null) {
		switch(name) {
			case "proposal-id":
				this.#attributeProposalIdValue = newValue;
				this.onProposalIdChanged(oldValue, newValue);
				break;
			default:
				// Shouldn't happen
		}
	}
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				getCourtProposalVoteDetailsTemplate()
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "court-proposal-vote-details"); // allow for easy query selecting
		this.refs = new CourtProposalVoteDetailsRefs(this);
	}
	connectedCallback() {
		// To be overridden by child class
	}
	disconnectedCallback() {
		// To be overridden by child class
	}
	adoptedCallback() {
		// To be overridden by child class
	}
	public static registerElement() {
		customElements.define("court-proposal-vote-details", this, { extends: "dialog"});
	}
}
export class CourtProposalCreatorRefs {
	#element: HTMLElement | ShadowRoot;
	constructor(element: HTMLElement | ShadowRoot) {
		this.#element = element;
	}
	#maxExpiry?: HTMLSpanElement;
	get maxExpiry() {
		if (this.#maxExpiry === undefined) {
			this.#maxExpiry = this.#element.querySelector("[cewt-ref=\"max-expiry\"]:not(:scope [is] *)")!;
		}
		return this.#maxExpiry;
	}
	#expiry?: HTMLInputElement;
	get expiry() {
		if (this.#expiry === undefined) {
			this.#expiry = this.#element.querySelector("[cewt-ref=\"expiry\"]:not(:scope [is] *)")!;
		}
		return this.#expiry;
	}
	#instructionContainer?: HTMLDivElement;
	get instructionContainer() {
		if (this.#instructionContainer === undefined) {
			this.#instructionContainer = this.#element.querySelector("[cewt-ref=\"instruction-container\"]:not(:scope [is] *)")!;
		}
		return this.#instructionContainer;
	}
	#menuItemDaoAdmin?: HTMLElement;
	get menuItemDaoAdmin() {
		if (this.#menuItemDaoAdmin === undefined) {
			this.#menuItemDaoAdmin = this.#element.querySelector("[cewt-ref=\"menu-item-dao-admin\"]:not(:scope [is] *)")!;
		}
		return this.#menuItemDaoAdmin;
	}
	#executeButton?: HTMLButtonElement;
	get executeButton() {
		if (this.#executeButton === undefined) {
			this.#executeButton = this.#element.querySelector("[cewt-ref=\"execute-button\"]:not(:scope [is] *)")!;
		}
		return this.#executeButton;
	}
	#cancelButton?: HTMLButtonElement;
	get cancelButton() {
		if (this.#cancelButton === undefined) {
			this.#cancelButton = this.#element.querySelector("[cewt-ref=\"cancel-button\"]:not(:scope [is] *)")!;
		}
		return this.#cancelButton;
	}
}
let _templateCourtProposalCreator: HTMLTemplateElement | null = null;
function getCourtProposalCreatorTemplate(): HTMLTemplateElement {
	if (_templateCourtProposalCreator == null) {
		 _templateCourtProposalCreator = document.createElement("template")
		 _templateCourtProposalCreator.innerHTML = "\n\t<h1>Create new proposal</h1>\n\t<label>\n\t\t<span>Voting time<span class=\"hide-if-refs-empty\"> (maximum is <span cewt-ref=\"max-expiry\"></span>)</span></span>\n\t\t<input cewt-ref=\"expiry\" name=\"expiry\" type=\"text\" placeholder=\"\" title=\"Enter duration (e.g., 5w4d3h2m1s for 5 weeks, 4 days, 3 hours, 2 minutes, 1 second).\" pattern=\"^\\s*(\\d+w)?\\s*(\\d+d)?\\s*(\\d+h)?\\s*(\\d+m)?\\s*(\\d+s)?\\s*(\\d+ms)?\\s*$\">\n\t</label>\n\t<p>Instructions will be executed in the order specified. If any fail, the entire transaction will fail.</p>\n\t<div cewt-ref=\"instruction-container\">\n\n\t</div>\n\t<button class=\"small\" style=\"display: block; margin: 4px auto\">Add instruction</button>\n\t<dropdown-menu click-trigger=\"primary\" linked-elements=\"*:has(+ #this)\">\n\t\t<dropdown-menu-item cewt-ref=\"menu-item-dao-admin\" value=\"change_court_admin\">Set DAO admin</dropdown-menu-item>\n\t\t<dropdown-menu-item value=\"send_coin\">Send coin (Native, ERC20, or CW20)</dropdown-menu-item>\n\t\t<dropdown-menu-item value=\"execute_evm\">EVM instruction</dropdown-menu-item>\n\t\t<dropdown-menu-item value=\"execute_wasm\">CosmWasm instruction</dropdown-menu-item>\n\t\t<dropdown-menu-item value=\"upgrade_wasm_contract\">Upgrade CosmWasm contract</dropdown-menu-item>\n\t\t<dropdown-menu-item value=\"change_wasm_contract_admin\">Change CosmWasm contract admin</dropdown-menu-item>\n\t\t<dropdown-menu-item value=\"clear_wasm_contract_admin\">Clear CosmWasm contract admin</dropdown-menu-item>\n\t\t<dropdown-menu-item value=\"tokenfactory_mint\">Mint coins</dropdown-menu-item>\n\t</dropdown-menu>\n\n\t<div class=\"button-row equal-width\">\n\t\t<button class=\"primary small\" cewt-ref=\"execute-button\">Propose</button>\n\t\t<button class=\"small\" cewt-ref=\"cancel-button\">Cancel</button>\n\t</div>\n";
	}
	return _templateCourtProposalCreator;
}
export class CourtProposalCreatorAutogen extends HTMLDialogElement {
	readonly refs: CourtProposalCreatorRefs;
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				getCourtProposalCreatorTemplate()
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "court-proposal-creator"); // allow for easy query selecting
		this.refs = new CourtProposalCreatorRefs(this);
	}
	connectedCallback() {
		// To be overridden by child class
	}
	disconnectedCallback() {
		// To be overridden by child class
	}
	adoptedCallback() {
		// To be overridden by child class
	}
	public static registerElement() {
		customElements.define("court-proposal-creator", this, { extends: "dialog"});
	}
}
export class CourtProposalCreatorSendCoinRefs {
	#element: HTMLElement | ShadowRoot;
	constructor(element: HTMLElement | ShadowRoot) {
		this.#element = element;
	}
	#deleteButton?: HTMLButtonElement;
	get deleteButton() {
		if (this.#deleteButton === undefined) {
			this.#deleteButton = this.#element.querySelector("[cewt-ref=\"delete-button\"]:not(:scope [is] *)")!;
		}
		return this.#deleteButton;
	}
	#form?: HTMLFormElementKnownControls<CourtProposalCreatorSendCoinFormCollection2, CourtProposalCreatorSendCoinFormValues2>;
	get form() {
		if (this.#form === undefined) {
			this.#form = this.#element.querySelector("[cewt-ref=\"form\"]:not(:scope [is] *)")!;
			this.#form.values = normalizeFormValues.bind(this.#form, this.#form) as any;
		}
		return this.#form;
	}
}
let _templateCourtProposalCreatorSendCoin: HTMLTemplateElement | null = null;
function getCourtProposalCreatorSendCoinTemplate(): HTMLTemplateElement {
	if (_templateCourtProposalCreatorSendCoin == null) {
		 _templateCourtProposalCreatorSendCoin = document.createElement("template")
		 _templateCourtProposalCreatorSendCoin.innerHTML = "\n\t<div class=\"drag-handle\"></div>\n\t<button cewt-ref=\"delete-button\" class=\"danger short delete-button\" aria-label=\"delete\">\n\t\t<i class=\"cicon cicon-size-xsmall cicon-trash cicon-gradient\"></i>\n\t</button>\n\t<form cewt-ref=\"form\">\n\t\t<h5>Send coin</h5>\n\t\t<label>\n\t\t\t<span>Recipient</span>\n\t\t\t<input name=\"recipient\" type=\"text\" title=\"A valid 0x or sei1 address\" pattern=\"^(0x[a-fA-F0-9]{40}|sei1(?:[a-z0-9]{38}|[a-z0-9]{58}))$\" placeholder=\"sei19rl4cm2hmr8afy4kldpxz3fka4jguq0a3vute5\">\n\t\t</label>\n\t\t<label>\n\t\t\t<span>Denom (native/ibc tokens should have their base unit entered as is, ERC20 tokens should be prepended with \"erc20/\", and sei1 tokens should be prepended with \"cw20/\")</span>\n\t\t\t<input name=\"denom\" type=\"text\" title=\"A token base unit\" placeholder=\"usei\" pattern=\"^(?:(?!erc20\\/|cw20\\/)[a-zA-Z][a-zA-Z0-9\\/:._\\-]{2,127}|cw20\\/sei1(?:[a-z0-9]{38}|[a-z0-9]{58})|erc20\\/0x[a-fA-F0-9]{40})$\">\n\t\t</label>\n\t\t<label>\n\t\t\t<span>Amount (no decimals)</span>\n\t\t\t<input min=\"1\" step=\"1\" placeholder=\"0\" name=\"amount\" type=\"number\">\n\t\t</label>\n\t</form>\n";
	}
	return _templateCourtProposalCreatorSendCoin;
}
export class CourtProposalCreatorSendCoinAutogen extends HTMLDivElement {
	readonly refs: CourtProposalCreatorSendCoinRefs;
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				getCourtProposalCreatorSendCoinTemplate()
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "court-proposal-creator-send-coin"); // allow for easy query selecting
		this.refs = new CourtProposalCreatorSendCoinRefs(this);
	}
	connectedCallback() {
		// To be overridden by child class
	}
	disconnectedCallback() {
		// To be overridden by child class
	}
	adoptedCallback() {
		// To be overridden by child class
	}
	public static registerElement() {
		customElements.define("court-proposal-creator-send-coin", this, { extends: "div"});
	}
}
export class CourtProposalCreatorExecuteEvmRefs {
	#element: HTMLElement | ShadowRoot;
	constructor(element: HTMLElement | ShadowRoot) {
		this.#element = element;
	}
	#deleteButton?: HTMLButtonElement;
	get deleteButton() {
		if (this.#deleteButton === undefined) {
			this.#deleteButton = this.#element.querySelector("[cewt-ref=\"delete-button\"]:not(:scope [is] *)")!;
		}
		return this.#deleteButton;
	}
	#form?: HTMLFormElementKnownControls<CourtProposalCreatorExecuteEvmFormCollection3, CourtProposalCreatorExecuteEvmFormValues3>;
	get form() {
		if (this.#form === undefined) {
			this.#form = this.#element.querySelector("[cewt-ref=\"form\"]:not(:scope [is] *)")!;
			this.#form.values = normalizeFormValues.bind(this.#form, this.#form) as any;
		}
		return this.#form;
	}
}
let _templateCourtProposalCreatorExecuteEvm: HTMLTemplateElement | null = null;
function getCourtProposalCreatorExecuteEvmTemplate(): HTMLTemplateElement {
	if (_templateCourtProposalCreatorExecuteEvm == null) {
		 _templateCourtProposalCreatorExecuteEvm = document.createElement("template")
		 _templateCourtProposalCreatorExecuteEvm.innerHTML = "\n\t<div class=\"drag-handle\"></div>\n\t<button cewt-ref=\"delete-button\" class=\"danger short delete-button\" aria-label=\"delete\">\n\t\t<i class=\"cicon cicon-size-xsmall cicon-trash cicon-gradient\"></i>\n\t</button>\n\t<form cewt-ref=\"form\">\n\t\t<h5>EVM Instruction</h5>\n\t\t<label>\n\t\t\t<span>Recipient</span>\n\t\t\t<input name=\"recipient\" type=\"text\" title=\"A valid 0x address\" pattern=\"^0x[a-fA-F0-9]{40}$\" placeholder=\"0x0000000000000000000000000000000000000000\">\n\t\t</label>\n\t\t<label>\n\t\t\t<span>aSEI (not uSEI, 1000000000000 aSEI = 1 uSEI, kind of like \"wei\")</span>\n\t\t\t<input min=\"0\" step=\"1\" placeholder=\"0\" name=\"amount\" type=\"number\">\n\t\t</label>\n\t\t<label>\n\t\t\t<span>Instruction data</span>\n\t\t\t<textarea name=\"data\"></textarea>\n\t\t</label>\n\t\t<label><input required=\"\" type=\"radio\" name=\"data_type\" checked=\"\" value=\"hex\"><span>Hex-encoded</span></label>\n\t\t<label><input required=\"\" type=\"radio\" name=\"data_type\" value=\"base64\"><span>Base64-encoded</span></label>\n\t</form>\n";
	}
	return _templateCourtProposalCreatorExecuteEvm;
}
export class CourtProposalCreatorExecuteEvmAutogen extends HTMLDivElement {
	readonly refs: CourtProposalCreatorExecuteEvmRefs;
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				getCourtProposalCreatorExecuteEvmTemplate()
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "court-proposal-creator-execute-evm"); // allow for easy query selecting
		this.refs = new CourtProposalCreatorExecuteEvmRefs(this);
	}
	connectedCallback() {
		// To be overridden by child class
	}
	disconnectedCallback() {
		// To be overridden by child class
	}
	adoptedCallback() {
		// To be overridden by child class
	}
	public static registerElement() {
		customElements.define("court-proposal-creator-execute-evm", this, { extends: "div"});
	}
}
export class CourtProposalCreatorExecuteWasmRefs {
	#element: HTMLElement | ShadowRoot;
	constructor(element: HTMLElement | ShadowRoot) {
		this.#element = element;
	}
	#deleteButton?: HTMLButtonElement;
	get deleteButton() {
		if (this.#deleteButton === undefined) {
			this.#deleteButton = this.#element.querySelector("[cewt-ref=\"delete-button\"]:not(:scope [is] *)")!;
		}
		return this.#deleteButton;
	}
	#form?: HTMLFormElementKnownControls<CourtProposalCreatorExecuteWasmFormCollection4, CourtProposalCreatorExecuteWasmFormValues4>;
	get form() {
		if (this.#form === undefined) {
			this.#form = this.#element.querySelector("[cewt-ref=\"form\"]:not(:scope [is] *)")!;
			this.#form.values = normalizeFormValues.bind(this.#form, this.#form) as any;
		}
		return this.#form;
	}
	#coinsContainer?: HTMLDivElement;
	get coinsContainer() {
		if (this.#coinsContainer === undefined) {
			this.#coinsContainer = this.#element.querySelector("[cewt-ref=\"coins-container\"]:not(:scope [is] *)")!;
		}
		return this.#coinsContainer;
	}
	#addCoinsButton?: HTMLButtonElement;
	get addCoinsButton() {
		if (this.#addCoinsButton === undefined) {
			this.#addCoinsButton = this.#element.querySelector("[cewt-ref=\"add-coins-button\"]:not(:scope [is] *)")!;
		}
		return this.#addCoinsButton;
	}
}
let _templateCourtProposalCreatorExecuteWasm: HTMLTemplateElement | null = null;
function getCourtProposalCreatorExecuteWasmTemplate(): HTMLTemplateElement {
	if (_templateCourtProposalCreatorExecuteWasm == null) {
		 _templateCourtProposalCreatorExecuteWasm = document.createElement("template")
		 _templateCourtProposalCreatorExecuteWasm.innerHTML = "\n\t<div class=\"drag-handle\"></div>\n\t<button cewt-ref=\"delete-button\" class=\"danger short delete-button\" aria-label=\"delete\">\n\t\t<i class=\"cicon cicon-size-xsmall cicon-trash cicon-gradient\"></i>\n\t</button>\n\t<form cewt-ref=\"form\">\n\t\t<h5>CosmWasm Instruction</h5>\n\t\t<label>\n\t\t\t<span>Contract</span>\n\t\t\t<input name=\"recipient\" type=\"text\" title=\"A valid sei1 address\" pattern=\"^sei1(?:[a-z0-9]{38}|[a-z0-9]{58})$\" placeholder=\"sei1hrpna9v7vs3stzyd4z3xf00676kf78zpe2u5ksvljswn2vnjp3yslucc3n\">\n\t\t</label>\n\t\t<label>\n\t\t\t<span>Instruction data</span>\n\t\t\t<textarea name=\"data\"></textarea>\n\t\t</label>\n\t\t<label><input type=\"radio\" name=\"data_type\" checked=\"\" value=\"json\"><span>JSON (used by most contracts)</span></label>\n\t\t<label><input type=\"radio\" name=\"data_type\" value=\"utf8\"><span>Plaintext</span></label>\n\t\t<label><input type=\"radio\" name=\"data_type\" value=\"base64\"><span>Base64-encoded</span></label>\n\t\t<div cewt-ref=\"coins-container\">\n\t\t</div>\n\t\t<button class=\"small\" cewt-ref=\"add-coins-button\" style=\"display: block; margin: auto\">Add coin</button>\n\t</form>\n";
	}
	return _templateCourtProposalCreatorExecuteWasm;
}
export class CourtProposalCreatorExecuteWasmAutogen extends HTMLDivElement {
	readonly refs: CourtProposalCreatorExecuteWasmRefs;
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				getCourtProposalCreatorExecuteWasmTemplate()
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "court-proposal-creator-execute-wasm"); // allow for easy query selecting
		this.refs = new CourtProposalCreatorExecuteWasmRefs(this);
	}
	connectedCallback() {
		// To be overridden by child class
	}
	disconnectedCallback() {
		// To be overridden by child class
	}
	adoptedCallback() {
		// To be overridden by child class
	}
	public static registerElement() {
		customElements.define("court-proposal-creator-execute-wasm", this, { extends: "div"});
	}
}
export class CourtProposalCreatorExecuteWasmCoinRefs {
	#element: HTMLElement | ShadowRoot;
	constructor(element: HTMLElement | ShadowRoot) {
		this.#element = element;
	}
	#deleteButton?: HTMLButtonElement;
	get deleteButton() {
		if (this.#deleteButton === undefined) {
			this.#deleteButton = this.#element.querySelector("[cewt-ref=\"delete-button\"]:not(:scope [is] *)")!;
		}
		return this.#deleteButton;
	}
	#form?: HTMLFormElementKnownControls<CourtProposalCreatorExecuteWasmCoinFormCollection5, CourtProposalCreatorExecuteWasmCoinFormValues5>;
	get form() {
		if (this.#form === undefined) {
			this.#form = this.#element.querySelector("[cewt-ref=\"form\"]:not(:scope [is] *)")!;
			this.#form.values = normalizeFormValues.bind(this.#form, this.#form) as any;
		}
		return this.#form;
	}
}
let _templateCourtProposalCreatorExecuteWasmCoin: HTMLTemplateElement | null = null;
function getCourtProposalCreatorExecuteWasmCoinTemplate(): HTMLTemplateElement {
	if (_templateCourtProposalCreatorExecuteWasmCoin == null) {
		 _templateCourtProposalCreatorExecuteWasmCoin = document.createElement("template")
		 _templateCourtProposalCreatorExecuteWasmCoin.innerHTML = "\n\t<div class=\"drag-handle\"></div>\n\t<button cewt-ref=\"delete-button\" class=\"danger short delete-button\" aria-label=\"delete\">\n\t\t<i class=\"cicon cicon-size-xsmall cicon-trash cicon-gradient\"></i>\n\t</button>\n\t<form cewt-ref=\"form\">\n\t\t<label>\n\t\t\t<span>Denom (ERC20 and CW20 assets cannot be used here)</span>\n\t\t\t<input name=\"denom\" type=\"text\" title=\"A token base unit\" placeholder=\"usei\" pattern=\"^(?!erc20\\/|cw20\\/)[a-zA-Z][a-zA-Z0-9\\/:._\\-]{2,127}$\">\n\t\t</label>\n\t\t<label>\n\t\t\t<span>Amount (no decimals)</span>\n\t\t\t<input min=\"1\" step=\"1\" placeholder=\"0\" name=\"amount\" type=\"number\">\n\t\t</label>\n\t</form>\n";
	}
	return _templateCourtProposalCreatorExecuteWasmCoin;
}
export class CourtProposalCreatorExecuteWasmCoinAutogen extends HTMLDivElement {
	readonly refs: CourtProposalCreatorExecuteWasmCoinRefs;
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				getCourtProposalCreatorExecuteWasmCoinTemplate()
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "court-proposal-creator-execute-wasm-coin"); // allow for easy query selecting
		this.refs = new CourtProposalCreatorExecuteWasmCoinRefs(this);
	}
	connectedCallback() {
		// To be overridden by child class
	}
	disconnectedCallback() {
		// To be overridden by child class
	}
	adoptedCallback() {
		// To be overridden by child class
	}
	public static registerElement() {
		customElements.define("court-proposal-creator-execute-wasm-coin", this, { extends: "div"});
	}
}
export class CourtProposalCreatorDaoAdminRefs {
	#element: HTMLElement | ShadowRoot;
	constructor(element: HTMLElement | ShadowRoot) {
		this.#element = element;
	}
	#deleteButton?: HTMLButtonElement;
	get deleteButton() {
		if (this.#deleteButton === undefined) {
			this.#deleteButton = this.#element.querySelector("[cewt-ref=\"delete-button\"]:not(:scope [is] *)")!;
		}
		return this.#deleteButton;
	}
	#form?: HTMLFormElementKnownControls<CourtProposalCreatorDaoAdminFormCollection6, CourtProposalCreatorDaoAdminFormValues6>;
	get form() {
		if (this.#form === undefined) {
			this.#form = this.#element.querySelector("[cewt-ref=\"form\"]:not(:scope [is] *)")!;
			this.#form.values = normalizeFormValues.bind(this.#form, this.#form) as any;
		}
		return this.#form;
	}
}
let _templateCourtProposalCreatorDaoAdmin: HTMLTemplateElement | null = null;
function getCourtProposalCreatorDaoAdminTemplate(): HTMLTemplateElement {
	if (_templateCourtProposalCreatorDaoAdmin == null) {
		 _templateCourtProposalCreatorDaoAdmin = document.createElement("template")
		 _templateCourtProposalCreatorDaoAdmin.innerHTML = "\n\t<div class=\"drag-handle\"></div>\n\t<button cewt-ref=\"delete-button\" class=\"danger short delete-button\" aria-label=\"delete\">\n\t\t<i class=\"cicon cicon-size-xsmall cicon-trash cicon-gradient\"></i>\n\t</button>\n\t<form cewt-ref=\"form\">\n\t\t<h5>DAO admin</h5>\n\t\t<label>\n\t\t\t<span>New admin</span>\n\t\t\t<input name=\"admin\" type=\"text\" title=\"A valid sei1 address\" pattern=\"^sei1(?:[a-z0-9]{38}|[a-z0-9]{58})$\" placeholder=\"sei19rl4cm2hmr8afy4kldpxz3fka4jguq0a3vute5\">\n\t\t</label>\n\t</form>\n";
	}
	return _templateCourtProposalCreatorDaoAdmin;
}
export class CourtProposalCreatorDaoAdminAutogen extends HTMLDivElement {
	readonly refs: CourtProposalCreatorDaoAdminRefs;
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				getCourtProposalCreatorDaoAdminTemplate()
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "court-proposal-creator-dao-admin"); // allow for easy query selecting
		this.refs = new CourtProposalCreatorDaoAdminRefs(this);
	}
	connectedCallback() {
		// To be overridden by child class
	}
	disconnectedCallback() {
		// To be overridden by child class
	}
	adoptedCallback() {
		// To be overridden by child class
	}
	public static registerElement() {
		customElements.define("court-proposal-creator-dao-admin", this, { extends: "div"});
	}
}
export class CourtProposalCreatorUpgradeWasmRefs {
	#element: HTMLElement | ShadowRoot;
	constructor(element: HTMLElement | ShadowRoot) {
		this.#element = element;
	}
	#deleteButton?: HTMLButtonElement;
	get deleteButton() {
		if (this.#deleteButton === undefined) {
			this.#deleteButton = this.#element.querySelector("[cewt-ref=\"delete-button\"]:not(:scope [is] *)")!;
		}
		return this.#deleteButton;
	}
	#form?: HTMLFormElementKnownControls<CourtProposalCreatorUpgradeWasmFormCollection7, CourtProposalCreatorUpgradeWasmFormValues7>;
	get form() {
		if (this.#form === undefined) {
			this.#form = this.#element.querySelector("[cewt-ref=\"form\"]:not(:scope [is] *)")!;
			this.#form.values = normalizeFormValues.bind(this.#form, this.#form) as any;
		}
		return this.#form;
	}
}
let _templateCourtProposalCreatorUpgradeWasm: HTMLTemplateElement | null = null;
function getCourtProposalCreatorUpgradeWasmTemplate(): HTMLTemplateElement {
	if (_templateCourtProposalCreatorUpgradeWasm == null) {
		 _templateCourtProposalCreatorUpgradeWasm = document.createElement("template")
		 _templateCourtProposalCreatorUpgradeWasm.innerHTML = "\n\t<div class=\"drag-handle\"></div>\n\t<button cewt-ref=\"delete-button\" class=\"danger short delete-button\" aria-label=\"delete\">\n\t\t<i class=\"cicon cicon-size-xsmall cicon-trash cicon-gradient\"></i>\n\t</button>\n\t<form cewt-ref=\"form\">\n\t\t<h5>Upgrade CosmWasm contract</h5>\n\t\t<label>\n\t\t\t<span>Contract</span>\n\t\t\t<input name=\"recipient\" type=\"text\" title=\"A valid sei1 address\" pattern=\"^sei1(?:[a-z0-9]{38}|[a-z0-9]{58})$\" placeholder=\"sei1hrpna9v7vs3stzyd4z3xf00676kf78zpe2u5ksvljswn2vnjp3yslucc3n\">\n\t\t</label>\n\t\t<label>\n\t\t\t<span>New Code ID</span>\n\t\t\t<input min=\"1\" step=\"1\" placeholder=\"0\" name=\"code\" type=\"number\">\n\t\t</label>\n\t\t<label>\n\t\t\t<span>Instruction data</span>\n\t\t\t<textarea name=\"data\"></textarea>\n\t\t</label>\n\t\t<label><input type=\"radio\" name=\"data_type\" value=\"json\"><span>JSON (used by most contracts)</span></label>\n\t\t<label><input type=\"radio\" name=\"data_type\" value=\"utf8\"><span>Plaintext</span></label>\n\t\t<label><input type=\"radio\" name=\"data_type\" value=\"base64\"><span>Base64-encoded</span></label>\n\t</form>\n";
	}
	return _templateCourtProposalCreatorUpgradeWasm;
}
export class CourtProposalCreatorUpgradeWasmAutogen extends HTMLDivElement {
	readonly refs: CourtProposalCreatorUpgradeWasmRefs;
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				getCourtProposalCreatorUpgradeWasmTemplate()
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "court-proposal-creator-upgrade-wasm"); // allow for easy query selecting
		this.refs = new CourtProposalCreatorUpgradeWasmRefs(this);
	}
	connectedCallback() {
		// To be overridden by child class
	}
	disconnectedCallback() {
		// To be overridden by child class
	}
	adoptedCallback() {
		// To be overridden by child class
	}
	public static registerElement() {
		customElements.define("court-proposal-creator-upgrade-wasm", this, { extends: "div"});
	}
}
export class CourtProposalCreatorChangeWasmAdminRefs {
	#element: HTMLElement | ShadowRoot;
	constructor(element: HTMLElement | ShadowRoot) {
		this.#element = element;
	}
	#deleteButton?: HTMLButtonElement;
	get deleteButton() {
		if (this.#deleteButton === undefined) {
			this.#deleteButton = this.#element.querySelector("[cewt-ref=\"delete-button\"]:not(:scope [is] *)")!;
		}
		return this.#deleteButton;
	}
	#form?: HTMLFormElementKnownControls<CourtProposalCreatorChangeWasmAdminFormCollection8, CourtProposalCreatorChangeWasmAdminFormValues8>;
	get form() {
		if (this.#form === undefined) {
			this.#form = this.#element.querySelector("[cewt-ref=\"form\"]:not(:scope [is] *)")!;
			this.#form.values = normalizeFormValues.bind(this.#form, this.#form) as any;
		}
		return this.#form;
	}
}
let _templateCourtProposalCreatorChangeWasmAdmin: HTMLTemplateElement | null = null;
function getCourtProposalCreatorChangeWasmAdminTemplate(): HTMLTemplateElement {
	if (_templateCourtProposalCreatorChangeWasmAdmin == null) {
		 _templateCourtProposalCreatorChangeWasmAdmin = document.createElement("template")
		 _templateCourtProposalCreatorChangeWasmAdmin.innerHTML = "\n\t<div class=\"drag-handle\"></div>\n\t<button cewt-ref=\"delete-button\" class=\"danger short delete-button\" aria-label=\"delete\">\n\t\t<i class=\"cicon cicon-size-xsmall cicon-trash cicon-gradient\"></i>\n\t</button>\n\t<form cewt-ref=\"form\">\n\t\t<h5>Change CosmWasm contract admin</h5>\n\t\t<label>\n\t\t\t<span>Contract</span>\n\t\t\t<input name=\"contract\" type=\"text\" title=\"A valid sei1 address\" pattern=\"^sei1(?:[a-z0-9]{38}|[a-z0-9]{58})$\" placeholder=\"sei1hrpna9v7vs3stzyd4z3xf00676kf78zpe2u5ksvljswn2vnjp3yslucc3n\">\n\t\t</label>\n\t\t<label>\n\t\t\t<span>New admin</span>\n\t\t\t<input name=\"admin\" type=\"text\" title=\"A valid sei1 address\" pattern=\"^sei1(?:[a-z0-9]{38}|[a-z0-9]{58})$\" placeholder=\"sei19rl4cm2hmr8afy4kldpxz3fka4jguq0a3vute5\">\n\t\t</label>\n\t</form>\n";
	}
	return _templateCourtProposalCreatorChangeWasmAdmin;
}
export class CourtProposalCreatorChangeWasmAdminAutogen extends HTMLDivElement {
	readonly refs: CourtProposalCreatorChangeWasmAdminRefs;
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				getCourtProposalCreatorChangeWasmAdminTemplate()
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "court-proposal-creator-change-wasm-admin"); // allow for easy query selecting
		this.refs = new CourtProposalCreatorChangeWasmAdminRefs(this);
	}
	connectedCallback() {
		// To be overridden by child class
	}
	disconnectedCallback() {
		// To be overridden by child class
	}
	adoptedCallback() {
		// To be overridden by child class
	}
	public static registerElement() {
		customElements.define("court-proposal-creator-change-wasm-admin", this, { extends: "div"});
	}
}
export class CourtProposalCreatorClearWasmAdminRefs {
	#element: HTMLElement | ShadowRoot;
	constructor(element: HTMLElement | ShadowRoot) {
		this.#element = element;
	}
	#deleteButton?: HTMLButtonElement;
	get deleteButton() {
		if (this.#deleteButton === undefined) {
			this.#deleteButton = this.#element.querySelector("[cewt-ref=\"delete-button\"]:not(:scope [is] *)")!;
		}
		return this.#deleteButton;
	}
	#form?: HTMLFormElementKnownControls<CourtProposalCreatorClearWasmAdminFormCollection9, CourtProposalCreatorClearWasmAdminFormValues9>;
	get form() {
		if (this.#form === undefined) {
			this.#form = this.#element.querySelector("[cewt-ref=\"form\"]:not(:scope [is] *)")!;
			this.#form.values = normalizeFormValues.bind(this.#form, this.#form) as any;
		}
		return this.#form;
	}
}
let _templateCourtProposalCreatorClearWasmAdmin: HTMLTemplateElement | null = null;
function getCourtProposalCreatorClearWasmAdminTemplate(): HTMLTemplateElement {
	if (_templateCourtProposalCreatorClearWasmAdmin == null) {
		 _templateCourtProposalCreatorClearWasmAdmin = document.createElement("template")
		 _templateCourtProposalCreatorClearWasmAdmin.innerHTML = "\n\t<div class=\"drag-handle\"></div>\n\t<button cewt-ref=\"delete-button\" class=\"danger short delete-button\" aria-label=\"delete\">\n\t\t<i class=\"cicon cicon-size-xsmall cicon-trash cicon-gradient\"></i>\n\t</button>\n\t<form cewt-ref=\"form\">\n\t\t<h5>Clear CosmWasm contract admin</h5>\n\t\t<label>\n\t\t\t<span>Contract</span>\n\t\t\t<input name=\"contract\" type=\"text\" title=\"A valid sei1 address\" pattern=\"^sei1(?:[a-z0-9]{38}|[a-z0-9]{58})$\" placeholder=\"sei1hrpna9v7vs3stzyd4z3xf00676kf78zpe2u5ksvljswn2vnjp3yslucc3n\">\n\t\t</label>\n\t</form>\n";
	}
	return _templateCourtProposalCreatorClearWasmAdmin;
}
export class CourtProposalCreatorClearWasmAdminAutogen extends HTMLDivElement {
	readonly refs: CourtProposalCreatorClearWasmAdminRefs;
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				getCourtProposalCreatorClearWasmAdminTemplate()
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "court-proposal-creator-clear-wasm-admin"); // allow for easy query selecting
		this.refs = new CourtProposalCreatorClearWasmAdminRefs(this);
	}
	connectedCallback() {
		// To be overridden by child class
	}
	disconnectedCallback() {
		// To be overridden by child class
	}
	adoptedCallback() {
		// To be overridden by child class
	}
	public static registerElement() {
		customElements.define("court-proposal-creator-clear-wasm-admin", this, { extends: "div"});
	}
}
export class CourtProposalCreatorMintCoinRefs {
	#element: HTMLElement | ShadowRoot;
	constructor(element: HTMLElement | ShadowRoot) {
		this.#element = element;
	}
	#deleteButton?: HTMLButtonElement;
	get deleteButton() {
		if (this.#deleteButton === undefined) {
			this.#deleteButton = this.#element.querySelector("[cewt-ref=\"delete-button\"]:not(:scope [is] *)")!;
		}
		return this.#deleteButton;
	}
	#form?: HTMLFormElementKnownControls<CourtProposalCreatorMintCoinFormCollection10, CourtProposalCreatorMintCoinFormValues10>;
	get form() {
		if (this.#form === undefined) {
			this.#form = this.#element.querySelector("[cewt-ref=\"form\"]:not(:scope [is] *)")!;
			this.#form.values = normalizeFormValues.bind(this.#form, this.#form) as any;
		}
		return this.#form;
	}
}
let _templateCourtProposalCreatorMintCoin: HTMLTemplateElement | null = null;
function getCourtProposalCreatorMintCoinTemplate(): HTMLTemplateElement {
	if (_templateCourtProposalCreatorMintCoin == null) {
		 _templateCourtProposalCreatorMintCoin = document.createElement("template")
		 _templateCourtProposalCreatorMintCoin.innerHTML = "\n\t<div class=\"drag-handle\"></div>\n\t<button cewt-ref=\"delete-button\" class=\"danger short delete-button\" aria-label=\"delete\">\n\t\t<i class=\"cicon cicon-size-xsmall cicon-trash cicon-gradient\"></i>\n\t</button>\n\t<form cewt-ref=\"form\">\n\t\t<h5>Mint coin</h5>\n\t\t<label>\n\t\t\t<span>Denom</span>\n\t\t\t<input name=\"denom\" type=\"text\" placeholder=\"factory/sei19rl4cm2hmr8afy4kldpxz3fka4jguq0a3vute5/mycoin\" title=\"Token-factory base denom with the format factory/{address}/{name}\" pattern=\"^factory\\/sei1(?:[a-z0-9]{38}|[a-z0-9]{58})\\/[a-zA-Z0-9:._\\-]+$\">\n\t\t</label>\n\t\t<label>\n\t\t\t<span>Amount (no decimals)</span>\n\t\t\t<input min=\"1\" step=\"1\" placeholder=\"0\" name=\"amount\" type=\"number\">\n\t\t</label>\n\t</form>\n";
	}
	return _templateCourtProposalCreatorMintCoin;
}
export class CourtProposalCreatorMintCoinAutogen extends HTMLDivElement {
	readonly refs: CourtProposalCreatorMintCoinRefs;
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				getCourtProposalCreatorMintCoinTemplate()
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "court-proposal-creator-mint-coin"); // allow for easy query selecting
		this.refs = new CourtProposalCreatorMintCoinRefs(this);
	}
	connectedCallback() {
		// To be overridden by child class
	}
	disconnectedCallback() {
		// To be overridden by child class
	}
	adoptedCallback() {
		// To be overridden by child class
	}
	public static registerElement() {
		customElements.define("court-proposal-creator-mint-coin", this, { extends: "div"});
	}
}
export type CourtProposalFormCollection1 = HTMLFormControlsCollection & {
	"vote": RadioNodeList;
	namedItem(name: "vote"): RadioNodeList;
};
export type CourtProposalFormValues1 = {
	"vote": "" | "abstain" | "approve" | "oppose";
};
export type CourtProposalCreatorSendCoinFormCollection2 = HTMLFormControlsCollection & {
	"recipient": HTMLInputElement;
	namedItem(name: "recipient"): HTMLInputElement;
	"denom": HTMLInputElement;
	namedItem(name: "denom"): HTMLInputElement;
	"amount": HTMLInputElement;
	namedItem(name: "amount"): HTMLInputElement;
};
export type CourtProposalCreatorSendCoinFormValues2 = {
	"recipient": string;
	"denom": string;
	"amount": number;
};
export type CourtProposalCreatorExecuteEvmFormCollection3 = HTMLFormControlsCollection & {
	"recipient": HTMLInputElement;
	namedItem(name: "recipient"): HTMLInputElement;
	"amount": HTMLInputElement;
	namedItem(name: "amount"): HTMLInputElement;
	"data": HTMLTextAreaElement;
	namedItem(name: "data"): HTMLTextAreaElement;
	"data_type": RadioNodeList;
	namedItem(name: "data_type"): RadioNodeList;
};
export type CourtProposalCreatorExecuteEvmFormValues3 = {
	"recipient": string;
	"amount": number;
	"data": string;
	"data_type": "" | "base64" | "hex";
};
export type CourtProposalCreatorExecuteWasmFormCollection4 = HTMLFormControlsCollection & {
	"recipient": HTMLInputElement;
	namedItem(name: "recipient"): HTMLInputElement;
	"data": HTMLTextAreaElement;
	namedItem(name: "data"): HTMLTextAreaElement;
	"data_type": RadioNodeList;
	namedItem(name: "data_type"): RadioNodeList;
};
export type CourtProposalCreatorExecuteWasmFormValues4 = {
	"recipient": string;
	"data": string;
	"data_type": "" | "base64" | "json" | "utf8";
};
export type CourtProposalCreatorExecuteWasmCoinFormCollection5 = HTMLFormControlsCollection & {
	"denom": HTMLInputElement;
	namedItem(name: "denom"): HTMLInputElement;
	"amount": HTMLInputElement;
	namedItem(name: "amount"): HTMLInputElement;
};
export type CourtProposalCreatorExecuteWasmCoinFormValues5 = {
	"denom": string;
	"amount": number;
};
export type CourtProposalCreatorDaoAdminFormCollection6 = HTMLFormControlsCollection & {
	"admin": HTMLInputElement;
	namedItem(name: "admin"): HTMLInputElement;
};
export type CourtProposalCreatorDaoAdminFormValues6 = {
	"admin": string;
};
export type CourtProposalCreatorUpgradeWasmFormCollection7 = HTMLFormControlsCollection & {
	"recipient": HTMLInputElement;
	namedItem(name: "recipient"): HTMLInputElement;
	"code": HTMLInputElement;
	namedItem(name: "code"): HTMLInputElement;
	"data": HTMLTextAreaElement;
	namedItem(name: "data"): HTMLTextAreaElement;
	"data_type": RadioNodeList;
	namedItem(name: "data_type"): RadioNodeList;
};
export type CourtProposalCreatorUpgradeWasmFormValues7 = {
	"recipient": string;
	"code": number;
	"data": string;
	"data_type": "" | "base64" | "json" | "utf8";
};
export type CourtProposalCreatorChangeWasmAdminFormCollection8 = HTMLFormControlsCollection & {
	"contract": HTMLInputElement;
	namedItem(name: "contract"): HTMLInputElement;
	"admin": HTMLInputElement;
	namedItem(name: "admin"): HTMLInputElement;
};
export type CourtProposalCreatorChangeWasmAdminFormValues8 = {
	"contract": string;
	"admin": string;
};
export type CourtProposalCreatorClearWasmAdminFormCollection9 = HTMLFormControlsCollection & {
	"contract": HTMLInputElement;
	namedItem(name: "contract"): HTMLInputElement;
};
export type CourtProposalCreatorClearWasmAdminFormValues9 = {
	"contract": string;
};
export type CourtProposalCreatorMintCoinFormCollection10 = HTMLFormControlsCollection & {
	"denom": HTMLInputElement;
	namedItem(name: "denom"): HTMLInputElement;
	"amount": HTMLInputElement;
	namedItem(name: "amount"): HTMLInputElement;
};
export type CourtProposalCreatorMintCoinFormValues10 = {
	"denom": string;
	"amount": number;
};
interface HTMLFormElementKnownControls<C extends HTMLFormControlsCollection, V> extends HTMLFormElement {
	readonly elements: C;
	values: () => V;
};
