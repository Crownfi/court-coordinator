// auto-generated by C.E.W.T.
// DO NOT EDIT BY HAND!!
import { normalizeFormValues } from "@aritz-cracker/browser-utils";
export class CourtProposalsContainerRefs {
	#element: HTMLElement | ShadowRoot;
	constructor(element: HTMLElement | ShadowRoot) {
		this.#element = element;
	}
	#newProposalButton?: HTMLButtonElement;
	get newProposalButton() {
		if (this.#newProposalButton === undefined) {
			this.#newProposalButton = this.#element.querySelector("[cewt-ref=\"new-proposal-button\"]:not(:scope [is] *)")!;
		}
		return this.#newProposalButton;
	}
}
let _templateCourtProposalsContainer: HTMLTemplateElement | null = null;
function getCourtProposalsContainerTemplate(): HTMLTemplateElement {
	if (_templateCourtProposalsContainer == null) {
		 _templateCourtProposalsContainer = document.createElement("template")
		 _templateCourtProposalsContainer.innerHTML = "\n\t<button class=\"primary\" cewt-ref=\"new-proposal-button\" style=\"display: block; margin: auto;\">New proposal</button>\n";
	}
	return _templateCourtProposalsContainer;
}
export class CourtProposalsContainerAutogen extends HTMLDivElement {
	readonly refs: CourtProposalsContainerRefs;
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				getCourtProposalsContainerTemplate()
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "court-proposals-container"); // allow for easy query selecting
		this.refs = new CourtProposalsContainerRefs(this);
	}
	connectedCallback() {
		// To be overridden by child class
	}
	disconnectedCallback() {
		// To be overridden by child class
	}
	adoptedCallback() {
		// To be overridden by child class
	}
	public static registerElement() {
		customElements.define("court-proposals-container", this, { extends: "div"});
	}
}
export class CourtProposalRefs {
	#element: HTMLElement | ShadowRoot;
	constructor(element: HTMLElement | ShadowRoot) {
		this.#element = element;
	}
	#proposalId?: HTMLSpanElement;
	get proposalId() {
		if (this.#proposalId === undefined) {
			this.#proposalId = this.#element.querySelector("[cewt-ref=\"proposal-id\"]:not(:scope [is] *)")!;
		}
		return this.#proposalId;
	}
	#status?: HTMLDivElement;
	get status() {
		if (this.#status === undefined) {
			this.#status = this.#element.querySelector("[cewt-ref=\"status\"]:not(:scope [is] *)")!;
		}
		return this.#status;
	}
	#votesApproveAmount?: HTMLSpanElement;
	get votesApproveAmount() {
		if (this.#votesApproveAmount === undefined) {
			this.#votesApproveAmount = this.#element.querySelector("[cewt-ref=\"votes-approve-amount\"]:not(:scope [is] *)")!;
		}
		return this.#votesApproveAmount;
	}
	#votesApprovePercent?: HTMLSpanElement;
	get votesApprovePercent() {
		if (this.#votesApprovePercent === undefined) {
			this.#votesApprovePercent = this.#element.querySelector("[cewt-ref=\"votes-approve-percent\"]:not(:scope [is] *)")!;
		}
		return this.#votesApprovePercent;
	}
	#votesOpposeAmount?: HTMLSpanElement;
	get votesOpposeAmount() {
		if (this.#votesOpposeAmount === undefined) {
			this.#votesOpposeAmount = this.#element.querySelector("[cewt-ref=\"votes-oppose-amount\"]:not(:scope [is] *)")!;
		}
		return this.#votesOpposeAmount;
	}
	#votesOpposePercent?: HTMLSpanElement;
	get votesOpposePercent() {
		if (this.#votesOpposePercent === undefined) {
			this.#votesOpposePercent = this.#element.querySelector("[cewt-ref=\"votes-oppose-percent\"]:not(:scope [is] *)")!;
		}
		return this.#votesOpposePercent;
	}
	#votesAbstainAmount?: HTMLSpanElement;
	get votesAbstainAmount() {
		if (this.#votesAbstainAmount === undefined) {
			this.#votesAbstainAmount = this.#element.querySelector("[cewt-ref=\"votes-abstain-amount\"]:not(:scope [is] *)")!;
		}
		return this.#votesAbstainAmount;
	}
	#votesAbstainPercent?: HTMLSpanElement;
	get votesAbstainPercent() {
		if (this.#votesAbstainPercent === undefined) {
			this.#votesAbstainPercent = this.#element.querySelector("[cewt-ref=\"votes-abstain-percent\"]:not(:scope [is] *)")!;
		}
		return this.#votesAbstainPercent;
	}
	#voterTurnoutContainer?: HTMLDivElement;
	get voterTurnoutContainer() {
		if (this.#voterTurnoutContainer === undefined) {
			this.#voterTurnoutContainer = this.#element.querySelector("[cewt-ref=\"voter-turnout-container\"]:not(:scope [is] *)")!;
		}
		return this.#voterTurnoutContainer;
	}
	#votesTurnoutAmount?: HTMLSpanElement;
	get votesTurnoutAmount() {
		if (this.#votesTurnoutAmount === undefined) {
			this.#votesTurnoutAmount = this.#element.querySelector("[cewt-ref=\"votes-turnout-amount\"]:not(:scope [is] *)")!;
		}
		return this.#votesTurnoutAmount;
	}
	#votesTurnoutNeededAmount?: HTMLSpanElement;
	get votesTurnoutNeededAmount() {
		if (this.#votesTurnoutNeededAmount === undefined) {
			this.#votesTurnoutNeededAmount = this.#element.querySelector("[cewt-ref=\"votes-turnout-needed-amount\"]:not(:scope [is] *)")!;
		}
		return this.#votesTurnoutNeededAmount;
	}
	#votesTurnoutProgress?: HTMLElement;
	get votesTurnoutProgress() {
		if (this.#votesTurnoutProgress === undefined) {
			this.#votesTurnoutProgress = this.#element.querySelector("[cewt-ref=\"votes-turnout-progress\"]:not(:scope [is] *)")!;
		}
		return this.#votesTurnoutProgress;
	}
	#approvalRatingContainer?: HTMLDivElement;
	get approvalRatingContainer() {
		if (this.#approvalRatingContainer === undefined) {
			this.#approvalRatingContainer = this.#element.querySelector("[cewt-ref=\"approval-rating-container\"]:not(:scope [is] *)")!;
		}
		return this.#approvalRatingContainer;
	}
	#approvalRatingPercent?: HTMLSpanElement;
	get approvalRatingPercent() {
		if (this.#approvalRatingPercent === undefined) {
			this.#approvalRatingPercent = this.#element.querySelector("[cewt-ref=\"approval-rating-percent\"]:not(:scope [is] *)")!;
		}
		return this.#approvalRatingPercent;
	}
	#approvalRatingPercentNeeded?: HTMLSpanElement;
	get approvalRatingPercentNeeded() {
		if (this.#approvalRatingPercentNeeded === undefined) {
			this.#approvalRatingPercentNeeded = this.#element.querySelector("[cewt-ref=\"approval-rating-percent-needed\"]:not(:scope [is] *)")!;
		}
		return this.#approvalRatingPercentNeeded;
	}
	#approvalRatingProgress?: HTMLElement;
	get approvalRatingProgress() {
		if (this.#approvalRatingProgress === undefined) {
			this.#approvalRatingProgress = this.#element.querySelector("[cewt-ref=\"approval-rating-progress\"]:not(:scope [is] *)")!;
		}
		return this.#approvalRatingProgress;
	}
	#voterDetailsButton?: HTMLButtonElement;
	get voterDetailsButton() {
		if (this.#voterDetailsButton === undefined) {
			this.#voterDetailsButton = this.#element.querySelector("[cewt-ref=\"voter-details-button\"]:not(:scope [is] *)")!;
		}
		return this.#voterDetailsButton;
	}
	#msgList?: HTMLOListElement;
	get msgList() {
		if (this.#msgList === undefined) {
			this.#msgList = this.#element.querySelector("[cewt-ref=\"msg-list\"]:not(:scope [is] *)")!;
		}
		return this.#msgList;
	}
	#userProposalVotes?: HTMLSpanElement;
	get userProposalVotes() {
		if (this.#userProposalVotes === undefined) {
			this.#userProposalVotes = this.#element.querySelector("[cewt-ref=\"user-proposal-votes\"]:not(:scope [is] *)")!;
		}
		return this.#userProposalVotes;
	}
	#userTotalVotes?: HTMLSpanElement;
	get userTotalVotes() {
		if (this.#userTotalVotes === undefined) {
			this.#userTotalVotes = this.#element.querySelector("[cewt-ref=\"user-total-votes\"]:not(:scope [is] *)")!;
		}
		return this.#userTotalVotes;
	}
	#userVoteForm?: HTMLFormElementKnownControls<CourtProposalFormCollection1, CourtProposalFormValues1>;
	get userVoteForm() {
		if (this.#userVoteForm === undefined) {
			this.#userVoteForm = this.#element.querySelector("[cewt-ref=\"user-vote-form\"]:not(:scope [is] *)")!;
			this.#userVoteForm.values = normalizeFormValues.bind(this.#userVoteForm, this.#userVoteForm) as any;
		}
		return this.#userVoteForm;
	}
	#executeButton?: HTMLButtonElement;
	get executeButton() {
		if (this.#executeButton === undefined) {
			this.#executeButton = this.#element.querySelector("[cewt-ref=\"execute-button\"]:not(:scope [is] *)")!;
		}
		return this.#executeButton;
	}
}
let _templateCourtProposal: HTMLTemplateElement | null = null;
function getCourtProposalTemplate(): HTMLTemplateElement {
	if (_templateCourtProposal == null) {
		 _templateCourtProposal = document.createElement("template")
		 _templateCourtProposal.innerHTML = "\n\t<h2>Proposal&nbsp;<span cewt-ref=\"proposal-id\">??</span></h2>\n\t<div class=\"important-note\" cewt-ref=\"status\">\n\t\tUnknown status\n\t</div>\n\t<div style=\"display: flex; justify-content: stretch; align-items:stretch; flex-wrap: wrap;\">\n\t\t<div class=\"important-note success\">\n\t\t\t<span cewt-ref=\"votes-approve-amount\">0</span> approval votes (<span cewt-ref=\"votes-approve-percent\">0</span>%)\n\t\t</div>\n\t\t<div class=\"important-note danger\">\n\t\t\t<span cewt-ref=\"votes-oppose-amount\">0</span> opposing votes (<span cewt-ref=\"votes-oppose-percent\">0</span>%)\n\t\t</div>\n\t\t<div class=\"important-note\">\n\t\t\t<span cewt-ref=\"votes-abstain-amount\">0</span> abstain votes (<span cewt-ref=\"votes-abstain-percent\">0</span>%)\n\t\t</div>\n\t</div>\n\t<div cewt-ref=\"voter-turnout-container\" class=\"important-note\">\n\t\tTotal votes: <span cewt-ref=\"votes-turnout-amount\">0</span>\n\t\t<span class=\"hide-if-refs-empty\"><br>(Minimum of <span cewt-ref=\"votes-turnout-needed-amount\">0</span> required)</span>\n\t</div>\n\t<progress-stacked style=\"width: 100%;\" cewt-ref=\"votes-turnout-progress\">\n\n\t</progress-stacked>\n\t<div class=\"important-note\" cewt-ref=\"approval-rating-container\">\n\t\tApproval rating: <span cewt-ref=\"approval-rating-percent\">0</span>%\n\t\t<span class=\"hide-if-refs-empty\">(Minimum of <span cewt-ref=\"approval-rating-percent-needed\">0</span>% required)</span>\n\t</div>\n\t<progress-stacked style=\"width: 100%;\" cewt-ref=\"approval-rating-progress\">\n\n\t</progress-stacked>\n\t<button class=\"small\" style=\"display: block; margin: auto;\" cewt-ref=\"voter-details-button\">Voter details</button>\n\t<ol start=\"0\" cewt-ref=\"msg-list\" class=\"vote-msgs\">\n\n\t</ol>\n\t<div class=\"important-note\">\n\t\tYou\'ve used <span cewt-ref=\"user-proposal-votes\">0</span><span class=\"hide-if-refs-empty\">/<span cewt-ref=\"user-total-votes\">0</span></span> of your votes\n\t</div>\n\t<form cewt-ref=\"user-vote-form\" style=\"display: flex; justify-content: space-between; align-items: center; flex-wrap: wrap;\">\n\t\t<label class=\"button success\">Approve<input name=\"vote\" value=\"approve\" type=\"radio\"></label>\n\t\t<label class=\"button danger\">Oppose<input name=\"vote\" value=\"oppose\" type=\"radio\"></label>\n\t\t<label class=\"button warning\">Abstain<input name=\"vote\" type=\"radio\" value=\"abstain\"></label>\n\t</form>\n\t<button cewt-ref=\"execute-button\" class=\"primary vote-finalize-button\">Execute proposal</button>\n";
	}
	return _templateCourtProposal;
}
export class CourtProposalAutogen extends HTMLDivElement {
	readonly refs: CourtProposalRefs;
	static get observedAttributes() {
		return ["proposal-id"];
	}
	#attributeProposalIdValue: string | null = null;
	get proposalId(): string | null {
		return this.#attributeProposalIdValue;
	}
	set proposalId(v: string | null) {
		if (v == null) {
			this.removeAttribute("proposal-id");
		}else{
			this.setAttribute("proposal-id", v);
		}
	}
	protected onProposalIdChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null) {
		switch(name) {
			case "proposal-id":
				this.#attributeProposalIdValue = newValue;
				this.onProposalIdChanged(oldValue, newValue);
				break;
			default:
				// Shouldn't happen
		}
	}
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				getCourtProposalTemplate()
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "court-proposal"); // allow for easy query selecting
		this.refs = new CourtProposalRefs(this);
	}
	connectedCallback() {
		// To be overridden by child class
	}
	disconnectedCallback() {
		// To be overridden by child class
	}
	adoptedCallback() {
		// To be overridden by child class
	}
	public static registerElement() {
		customElements.define("court-proposal", this, { extends: "div"});
	}
}
export class CourtProposalMsgSendCoinRefs {
	#element: HTMLElement | ShadowRoot;
	constructor(element: HTMLElement | ShadowRoot) {
		this.#element = element;
	}
	#coins?: HTMLSpanElement;
	get coins() {
		if (this.#coins === undefined) {
			this.#coins = this.#element.querySelector("[cewt-ref=\"coins\"]:not(:scope [is] *)")!;
		}
		return this.#coins;
	}
	#recipient?: HTMLSpanElement;
	get recipient() {
		if (this.#recipient === undefined) {
			this.#recipient = this.#element.querySelector("[cewt-ref=\"recipient\"]:not(:scope [is] *)")!;
		}
		return this.#recipient;
	}
}
let _templateCourtProposalMsgSendCoin: HTMLTemplateElement | null = null;
function getCourtProposalMsgSendCoinTemplate(): HTMLTemplateElement {
	if (_templateCourtProposalMsgSendCoin == null) {
		 _templateCourtProposalMsgSendCoin = document.createElement("template")
		 _templateCourtProposalMsgSendCoin.innerHTML = "\n\tSend <span cewt-ref=\"coins\">??? ???</span> to <span cewt-ref=\"recipient\">???</span>\n";
	}
	return _templateCourtProposalMsgSendCoin;
}
export class CourtProposalMsgSendCoinAutogen extends HTMLLIElement {
	readonly refs: CourtProposalMsgSendCoinRefs;
	static get observedAttributes() {
		return ["coin-amount", "recipient", "denom"];
	}
	#attributeCoinAmountValue: string | null = null;
	get coinAmount(): string | null {
		return this.#attributeCoinAmountValue;
	}
	set coinAmount(v: string | null) {
		if (v == null) {
			this.removeAttribute("coin-amount");
		}else{
			this.setAttribute("coin-amount", v);
		}
	}
	protected onCoinAmountChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	#attributeRecipientValue: string | null = null;
	get recipient(): string | null {
		return this.#attributeRecipientValue;
	}
	set recipient(v: string | null) {
		if (v == null) {
			this.removeAttribute("recipient");
		}else{
			this.setAttribute("recipient", v);
		}
	}
	protected onRecipientChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	#attributeDenomValue: string | null = null;
	get denom(): string | null {
		return this.#attributeDenomValue;
	}
	set denom(v: string | null) {
		if (v == null) {
			this.removeAttribute("denom");
		}else{
			this.setAttribute("denom", v);
		}
	}
	protected onDenomChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null) {
		switch(name) {
			case "coin-amount":
				this.#attributeCoinAmountValue = newValue;
				this.onCoinAmountChanged(oldValue, newValue);
				break;
			case "recipient":
				this.#attributeRecipientValue = newValue;
				this.onRecipientChanged(oldValue, newValue);
				break;
			case "denom":
				this.#attributeDenomValue = newValue;
				this.onDenomChanged(oldValue, newValue);
				break;
			default:
				// Shouldn't happen
		}
	}
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				getCourtProposalMsgSendCoinTemplate()
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "court-proposal-msg-send-coin"); // allow for easy query selecting
		this.refs = new CourtProposalMsgSendCoinRefs(this);
	}
	connectedCallback() {
		// To be overridden by child class
	}
	disconnectedCallback() {
		// To be overridden by child class
	}
	adoptedCallback() {
		// To be overridden by child class
	}
	public static registerElement() {
		customElements.define("court-proposal-msg-send-coin", this, { extends: "li"});
	}
}
export class CourtProposalMsgWasmExecRefs {
	#element: HTMLElement | ShadowRoot;
	constructor(element: HTMLElement | ShadowRoot) {
		this.#element = element;
	}
	#contract?: HTMLSpanElement;
	get contract() {
		if (this.#contract === undefined) {
			this.#contract = this.#element.querySelector("[cewt-ref=\"contract\"]:not(:scope [is] *)")!;
		}
		return this.#contract;
	}
	#list?: HTMLUListElement;
	get list() {
		if (this.#list === undefined) {
			this.#list = this.#element.querySelector("[cewt-ref=\"list\"]:not(:scope [is] *)")!;
		}
		return this.#list;
	}
}
let _templateCourtProposalMsgWasmExec: HTMLTemplateElement | null = null;
function getCourtProposalMsgWasmExecTemplate(): HTMLTemplateElement {
	if (_templateCourtProposalMsgWasmExec == null) {
		 _templateCourtProposalMsgWasmExec = document.createElement("template")
		 _templateCourtProposalMsgWasmExec.innerHTML = "\n\tExecute WASM contract <span cewt-ref=\"contract\">???</span> <br>\n\t<ul cewt-ref=\"list\"></ul>\n";
	}
	return _templateCourtProposalMsgWasmExec;
}
export class CourtProposalMsgWasmExecAutogen extends HTMLLIElement {
	readonly refs: CourtProposalMsgWasmExecRefs;
	static get observedAttributes() {
		return ["funds", "payload", "contract"];
	}
	#attributeFundsValue: string | null = null;
	get funds(): string | null {
		return this.#attributeFundsValue;
	}
	set funds(v: string | null) {
		if (v == null) {
			this.removeAttribute("funds");
		}else{
			this.setAttribute("funds", v);
		}
	}
	protected onFundsChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	#attributePayloadValue: string | null = null;
	get payload(): string | null {
		return this.#attributePayloadValue;
	}
	set payload(v: string | null) {
		if (v == null) {
			this.removeAttribute("payload");
		}else{
			this.setAttribute("payload", v);
		}
	}
	protected onPayloadChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	#attributeContractValue: string | null = null;
	get contract(): string | null {
		return this.#attributeContractValue;
	}
	set contract(v: string | null) {
		if (v == null) {
			this.removeAttribute("contract");
		}else{
			this.setAttribute("contract", v);
		}
	}
	protected onContractChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null) {
		switch(name) {
			case "funds":
				this.#attributeFundsValue = newValue;
				this.onFundsChanged(oldValue, newValue);
				break;
			case "payload":
				this.#attributePayloadValue = newValue;
				this.onPayloadChanged(oldValue, newValue);
				break;
			case "contract":
				this.#attributeContractValue = newValue;
				this.onContractChanged(oldValue, newValue);
				break;
			default:
				// Shouldn't happen
		}
	}
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				getCourtProposalMsgWasmExecTemplate()
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "court-proposal-msg-wasm-exec"); // allow for easy query selecting
		this.refs = new CourtProposalMsgWasmExecRefs(this);
	}
	connectedCallback() {
		// To be overridden by child class
	}
	disconnectedCallback() {
		// To be overridden by child class
	}
	adoptedCallback() {
		// To be overridden by child class
	}
	public static registerElement() {
		customElements.define("court-proposal-msg-wasm-exec", this, { extends: "li"});
	}
}
export class CourtProposalMsgEvmExecRefs {
	#element: HTMLElement | ShadowRoot;
	constructor(element: HTMLElement | ShadowRoot) {
		this.#element = element;
	}
	#contract?: HTMLSpanElement;
	get contract() {
		if (this.#contract === undefined) {
			this.#contract = this.#element.querySelector("[cewt-ref=\"contract\"]:not(:scope [is] *)")!;
		}
		return this.#contract;
	}
	#list?: HTMLUListElement;
	get list() {
		if (this.#list === undefined) {
			this.#list = this.#element.querySelector("[cewt-ref=\"list\"]:not(:scope [is] *)")!;
		}
		return this.#list;
	}
}
let _templateCourtProposalMsgEvmExec: HTMLTemplateElement | null = null;
function getCourtProposalMsgEvmExecTemplate(): HTMLTemplateElement {
	if (_templateCourtProposalMsgEvmExec == null) {
		 _templateCourtProposalMsgEvmExec = document.createElement("template")
		 _templateCourtProposalMsgEvmExec.innerHTML = "\n\tExecute EVM contract <span cewt-ref=\"contract\">???</span> <br>\n\t<ul cewt-ref=\"list\"></ul>\n";
	}
	return _templateCourtProposalMsgEvmExec;
}
export class CourtProposalMsgEvmExecAutogen extends HTMLLIElement {
	readonly refs: CourtProposalMsgEvmExecRefs;
	static get observedAttributes() {
		return ["asei-amount", "contract", "payload"];
	}
	#attributeAseiAmountValue: string | null = null;
	get aseiAmount(): string | null {
		return this.#attributeAseiAmountValue;
	}
	set aseiAmount(v: string | null) {
		if (v == null) {
			this.removeAttribute("asei-amount");
		}else{
			this.setAttribute("asei-amount", v);
		}
	}
	protected onAseiAmountChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	#attributeContractValue: string | null = null;
	get contract(): string | null {
		return this.#attributeContractValue;
	}
	set contract(v: string | null) {
		if (v == null) {
			this.removeAttribute("contract");
		}else{
			this.setAttribute("contract", v);
		}
	}
	protected onContractChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	#attributePayloadValue: string | null = null;
	get payload(): string | null {
		return this.#attributePayloadValue;
	}
	set payload(v: string | null) {
		if (v == null) {
			this.removeAttribute("payload");
		}else{
			this.setAttribute("payload", v);
		}
	}
	protected onPayloadChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null) {
		switch(name) {
			case "asei-amount":
				this.#attributeAseiAmountValue = newValue;
				this.onAseiAmountChanged(oldValue, newValue);
				break;
			case "contract":
				this.#attributeContractValue = newValue;
				this.onContractChanged(oldValue, newValue);
				break;
			case "payload":
				this.#attributePayloadValue = newValue;
				this.onPayloadChanged(oldValue, newValue);
				break;
			default:
				// Shouldn't happen
		}
	}
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				getCourtProposalMsgEvmExecTemplate()
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "court-proposal-msg-evm-exec"); // allow for easy query selecting
		this.refs = new CourtProposalMsgEvmExecRefs(this);
	}
	connectedCallback() {
		// To be overridden by child class
	}
	disconnectedCallback() {
		// To be overridden by child class
	}
	adoptedCallback() {
		// To be overridden by child class
	}
	public static registerElement() {
		customElements.define("court-proposal-msg-evm-exec", this, { extends: "li"});
	}
}
export class CourtProposalMsgWasmUpgradeRefs {
	#element: HTMLElement | ShadowRoot;
	constructor(element: HTMLElement | ShadowRoot) {
		this.#element = element;
	}
	#contract?: HTMLSpanElement;
	get contract() {
		if (this.#contract === undefined) {
			this.#contract = this.#element.querySelector("[cewt-ref=\"contract\"]:not(:scope [is] *)")!;
		}
		return this.#contract;
	}
	#codeId?: HTMLSpanElement;
	get codeId() {
		if (this.#codeId === undefined) {
			this.#codeId = this.#element.querySelector("[cewt-ref=\"code-id\"]:not(:scope [is] *)")!;
		}
		return this.#codeId;
	}
	#payload?: HTMLPreElement;
	get payload() {
		if (this.#payload === undefined) {
			this.#payload = this.#element.querySelector("[cewt-ref=\"payload\"]:not(:scope [is] *)")!;
		}
		return this.#payload;
	}
}
let _templateCourtProposalMsgWasmUpgrade: HTMLTemplateElement | null = null;
function getCourtProposalMsgWasmUpgradeTemplate(): HTMLTemplateElement {
	if (_templateCourtProposalMsgWasmUpgrade == null) {
		 _templateCourtProposalMsgWasmUpgrade = document.createElement("template")
		 _templateCourtProposalMsgWasmUpgrade.innerHTML = "\n\tUpgrade <span cewt-ref=\"contract\">???</span> to code ID <span cewt-ref=\"code-id\">???</span>\n\t<pre cewt-ref=\"payload\"></pre>\n";
	}
	return _templateCourtProposalMsgWasmUpgrade;
}
export class CourtProposalMsgWasmUpgradeAutogen extends HTMLLIElement {
	readonly refs: CourtProposalMsgWasmUpgradeRefs;
	static get observedAttributes() {
		return ["contract", "code-id", "payload"];
	}
	#attributeContractValue: string | null = null;
	get contract(): string | null {
		return this.#attributeContractValue;
	}
	set contract(v: string | null) {
		if (v == null) {
			this.removeAttribute("contract");
		}else{
			this.setAttribute("contract", v);
		}
	}
	protected onContractChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	#attributeCodeIdValue: string | null = null;
	get codeId(): string | null {
		return this.#attributeCodeIdValue;
	}
	set codeId(v: string | null) {
		if (v == null) {
			this.removeAttribute("code-id");
		}else{
			this.setAttribute("code-id", v);
		}
	}
	protected onCodeIdChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	#attributePayloadValue: string | null = null;
	get payload(): string | null {
		return this.#attributePayloadValue;
	}
	set payload(v: string | null) {
		if (v == null) {
			this.removeAttribute("payload");
		}else{
			this.setAttribute("payload", v);
		}
	}
	protected onPayloadChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null) {
		switch(name) {
			case "contract":
				this.#attributeContractValue = newValue;
				this.onContractChanged(oldValue, newValue);
				break;
			case "code-id":
				this.#attributeCodeIdValue = newValue;
				this.onCodeIdChanged(oldValue, newValue);
				break;
			case "payload":
				this.#attributePayloadValue = newValue;
				this.onPayloadChanged(oldValue, newValue);
				break;
			default:
				// Shouldn't happen
		}
	}
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				getCourtProposalMsgWasmUpgradeTemplate()
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "court-proposal-msg-wasm-upgrade"); // allow for easy query selecting
		this.refs = new CourtProposalMsgWasmUpgradeRefs(this);
	}
	connectedCallback() {
		// To be overridden by child class
	}
	disconnectedCallback() {
		// To be overridden by child class
	}
	adoptedCallback() {
		// To be overridden by child class
	}
	public static registerElement() {
		customElements.define("court-proposal-msg-wasm-upgrade", this, { extends: "li"});
	}
}
export class CourtProposalMsgWasmChAdminRefs {
	#element: HTMLElement | ShadowRoot;
	constructor(element: HTMLElement | ShadowRoot) {
		this.#element = element;
	}
	#contract?: HTMLSpanElement;
	get contract() {
		if (this.#contract === undefined) {
			this.#contract = this.#element.querySelector("[cewt-ref=\"contract\"]:not(:scope [is] *)")!;
		}
		return this.#contract;
	}
	#admin?: HTMLSpanElement;
	get admin() {
		if (this.#admin === undefined) {
			this.#admin = this.#element.querySelector("[cewt-ref=\"admin\"]:not(:scope [is] *)")!;
		}
		return this.#admin;
	}
}
let _templateCourtProposalMsgWasmChAdmin: HTMLTemplateElement | null = null;
function getCourtProposalMsgWasmChAdminTemplate(): HTMLTemplateElement {
	if (_templateCourtProposalMsgWasmChAdmin == null) {
		 _templateCourtProposalMsgWasmChAdmin = document.createElement("template")
		 _templateCourtProposalMsgWasmChAdmin.innerHTML = "\n\tSet upgrade admin for <span cewt-ref=\"contract\">???</span> to <span cewt-ref=\"admin\">???</span>\n";
	}
	return _templateCourtProposalMsgWasmChAdmin;
}
export class CourtProposalMsgWasmChAdminAutogen extends HTMLLIElement {
	readonly refs: CourtProposalMsgWasmChAdminRefs;
	static get observedAttributes() {
		return ["contract", "admin"];
	}
	#attributeContractValue: string | null = null;
	get contract(): string | null {
		return this.#attributeContractValue;
	}
	set contract(v: string | null) {
		if (v == null) {
			this.removeAttribute("contract");
		}else{
			this.setAttribute("contract", v);
		}
	}
	protected onContractChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	#attributeAdminValue: string | null = null;
	get admin(): string | null {
		return this.#attributeAdminValue;
	}
	set admin(v: string | null) {
		if (v == null) {
			this.removeAttribute("admin");
		}else{
			this.setAttribute("admin", v);
		}
	}
	protected onAdminChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null) {
		switch(name) {
			case "contract":
				this.#attributeContractValue = newValue;
				this.onContractChanged(oldValue, newValue);
				break;
			case "admin":
				this.#attributeAdminValue = newValue;
				this.onAdminChanged(oldValue, newValue);
				break;
			default:
				// Shouldn't happen
		}
	}
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				getCourtProposalMsgWasmChAdminTemplate()
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "court-proposal-msg-wasm-ch-admin"); // allow for easy query selecting
		this.refs = new CourtProposalMsgWasmChAdminRefs(this);
	}
	connectedCallback() {
		// To be overridden by child class
	}
	disconnectedCallback() {
		// To be overridden by child class
	}
	adoptedCallback() {
		// To be overridden by child class
	}
	public static registerElement() {
		customElements.define("court-proposal-msg-wasm-ch-admin", this, { extends: "li"});
	}
}
export class CourtProposalMsgWasmClAdminRefs {
	#element: HTMLElement | ShadowRoot;
	constructor(element: HTMLElement | ShadowRoot) {
		this.#element = element;
	}
	#contract?: HTMLSpanElement;
	get contract() {
		if (this.#contract === undefined) {
			this.#contract = this.#element.querySelector("[cewt-ref=\"contract\"]:not(:scope [is] *)")!;
		}
		return this.#contract;
	}
}
let _templateCourtProposalMsgWasmClAdmin: HTMLTemplateElement | null = null;
function getCourtProposalMsgWasmClAdminTemplate(): HTMLTemplateElement {
	if (_templateCourtProposalMsgWasmClAdmin == null) {
		 _templateCourtProposalMsgWasmClAdmin = document.createElement("template")
		 _templateCourtProposalMsgWasmClAdmin.innerHTML = "\n\tClear upgrade admin for <span cewt-ref=\"contract\">???</span>\n";
	}
	return _templateCourtProposalMsgWasmClAdmin;
}
export class CourtProposalMsgWasmClAdminAutogen extends HTMLLIElement {
	readonly refs: CourtProposalMsgWasmClAdminRefs;
	static get observedAttributes() {
		return ["contract"];
	}
	#attributeContractValue: string | null = null;
	get contract(): string | null {
		return this.#attributeContractValue;
	}
	set contract(v: string | null) {
		if (v == null) {
			this.removeAttribute("contract");
		}else{
			this.setAttribute("contract", v);
		}
	}
	protected onContractChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null) {
		switch(name) {
			case "contract":
				this.#attributeContractValue = newValue;
				this.onContractChanged(oldValue, newValue);
				break;
			default:
				// Shouldn't happen
		}
	}
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				getCourtProposalMsgWasmClAdminTemplate()
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "court-proposal-msg-wasm-cl-admin"); // allow for easy query selecting
		this.refs = new CourtProposalMsgWasmClAdminRefs(this);
	}
	connectedCallback() {
		// To be overridden by child class
	}
	disconnectedCallback() {
		// To be overridden by child class
	}
	adoptedCallback() {
		// To be overridden by child class
	}
	public static registerElement() {
		customElements.define("court-proposal-msg-wasm-cl-admin", this, { extends: "li"});
	}
}
export class CourtProposalMsgMintRefs {
	#element: HTMLElement | ShadowRoot;
	constructor(element: HTMLElement | ShadowRoot) {
		this.#element = element;
	}
	#coins?: HTMLSpanElement;
	get coins() {
		if (this.#coins === undefined) {
			this.#coins = this.#element.querySelector("[cewt-ref=\"coins\"]:not(:scope [is] *)")!;
		}
		return this.#coins;
	}
}
let _templateCourtProposalMsgMint: HTMLTemplateElement | null = null;
function getCourtProposalMsgMintTemplate(): HTMLTemplateElement {
	if (_templateCourtProposalMsgMint == null) {
		 _templateCourtProposalMsgMint = document.createElement("template")
		 _templateCourtProposalMsgMint.innerHTML = "\n\tMint <span cewt-ref=\"coins\">???</span>\n";
	}
	return _templateCourtProposalMsgMint;
}
export class CourtProposalMsgMintAutogen extends HTMLLIElement {
	readonly refs: CourtProposalMsgMintRefs;
	static get observedAttributes() {
		return ["denom", "amount"];
	}
	#attributeDenomValue: string | null = null;
	get denom(): string | null {
		return this.#attributeDenomValue;
	}
	set denom(v: string | null) {
		if (v == null) {
			this.removeAttribute("denom");
		}else{
			this.setAttribute("denom", v);
		}
	}
	protected onDenomChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	#attributeAmountValue: string | null = null;
	get amount(): string | null {
		return this.#attributeAmountValue;
	}
	set amount(v: string | null) {
		if (v == null) {
			this.removeAttribute("amount");
		}else{
			this.setAttribute("amount", v);
		}
	}
	protected onAmountChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null) {
		switch(name) {
			case "denom":
				this.#attributeDenomValue = newValue;
				this.onDenomChanged(oldValue, newValue);
				break;
			case "amount":
				this.#attributeAmountValue = newValue;
				this.onAmountChanged(oldValue, newValue);
				break;
			default:
				// Shouldn't happen
		}
	}
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				getCourtProposalMsgMintTemplate()
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "court-proposal-msg-mint"); // allow for easy query selecting
		this.refs = new CourtProposalMsgMintRefs(this);
	}
	connectedCallback() {
		// To be overridden by child class
	}
	disconnectedCallback() {
		// To be overridden by child class
	}
	adoptedCallback() {
		// To be overridden by child class
	}
	public static registerElement() {
		customElements.define("court-proposal-msg-mint", this, { extends: "li"});
	}
}
export class CourtProposalPlaceholderRefs {
	#element: HTMLElement | ShadowRoot;
	constructor(element: HTMLElement | ShadowRoot) {
		this.#element = element;
	}
}
let _templateCourtProposalPlaceholder: HTMLTemplateElement | null = null;
function getCourtProposalPlaceholderTemplate(): HTMLTemplateElement {
	if (_templateCourtProposalPlaceholder == null) {
		 _templateCourtProposalPlaceholder = document.createElement("template")
		 _templateCourtProposalPlaceholder.innerHTML = "\n\t<h2>Proposal&nbsp;??</h2>\n\t<div class=\"important-note\">\n\t\tUnknown status\n\t</div>\n\t<div style=\"display: flex; justify-content: stretch; align-items:stretch; flex-wrap: wrap;\">\n\t\t<div class=\"important-note success\">\n\t\t\t?? approval votes (??%)\n\t\t</div>\n\t\t<div class=\"important-note danger\">\n\t\t\t?? opposing votes (??%)\n\t\t</div>\n\t\t<div class=\"important-note\">\n\t\t\t?? abstain votes (??%)\n\t\t</div>\n\t</div>\n\t<div class=\"important-note\">\n\t\tTotal votes: ????<br>\n\t\t(Minimum of ???? required)\n\t</div>\n\t<progress-stacked style=\"width: 100%;\"></progress-stacked>\n\t<div class=\"important-note\">\n\t\tApproval rating: ??%\n\t\t(Minimum of ??% required)\n\t</div>\n\t<progress-stacked style=\"width: 100%;\"></progress-stacked>\n\t<button style=\"display: block; margin: auto;\" class=\"small\">Voter details</button>\n\t<ol start=\"0\" class=\"vote-msgs\">\n\t\t<li>Wait for the proposal to load</li>\n\t</ol>\n\t<div class=\"important-note\">\n\t\tYou\'ve used ????/???? of your votes\n\t</div>\n\t<form style=\"display: flex; justify-content: space-between; align-items: center; flex-wrap: wrap;\">\n\t\t<label class=\"button success\">Approve<input type=\"radio\" value=\"approve\" name=\"vote\"></label>\n\t\t<label class=\"button danger\">Oppose<input value=\"oppose\" name=\"vote\" type=\"radio\"></label>\n\t\t<label class=\"button warning\">Abstain<input name=\"vote\" type=\"radio\" value=\"abstain\"></label>\n\t</form>\n\t<button class=\"primary vote-finalize-button\">Execute proposal</button>\n";
	}
	return _templateCourtProposalPlaceholder;
}
export class CourtProposalPlaceholderAutogen extends HTMLDivElement {
	readonly refs: CourtProposalPlaceholderRefs;
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				getCourtProposalPlaceholderTemplate()
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "court-proposal-placeholder"); // allow for easy query selecting
		this.refs = new CourtProposalPlaceholderRefs(this);
	}
	connectedCallback() {
		// To be overridden by child class
	}
	disconnectedCallback() {
		// To be overridden by child class
	}
	adoptedCallback() {
		// To be overridden by child class
	}
	public static registerElement() {
		customElements.define("court-proposal-placeholder", this, { extends: "div"});
	}
}
export class CourtProposalVoteDetailsRefs {
	#element: HTMLElement | ShadowRoot;
	constructor(element: HTMLElement | ShadowRoot) {
		this.#element = element;
	}
	#proposalId?: HTMLSpanElement;
	get proposalId() {
		if (this.#proposalId === undefined) {
			this.#proposalId = this.#element.querySelector("[cewt-ref=\"proposal-id\"]:not(:scope [is] *)")!;
		}
		return this.#proposalId;
	}
	#voteList?: HTMLUListElement;
	get voteList() {
		if (this.#voteList === undefined) {
			this.#voteList = this.#element.querySelector("[cewt-ref=\"vote-list\"]:not(:scope [is] *)")!;
		}
		return this.#voteList;
	}
}
let _templateCourtProposalVoteDetails: HTMLTemplateElement | null = null;
function getCourtProposalVoteDetailsTemplate(): HTMLTemplateElement {
	if (_templateCourtProposalVoteDetails == null) {
		 _templateCourtProposalVoteDetails = document.createElement("template")
		 _templateCourtProposalVoteDetails.innerHTML = "\n\t<h1>Votes for proposal <span cewt-ref=\"proposal-id\">#</span></h1>\n\t<ul cewt-ref=\"vote-list\">\n\n\t</ul>\n\t<button style=\"display: block; margin: auto;\" class=\"small\">Close</button>\n";
	}
	return _templateCourtProposalVoteDetails;
}
export class CourtProposalVoteDetailsAutogen extends HTMLDialogElement {
	readonly refs: CourtProposalVoteDetailsRefs;
	static get observedAttributes() {
		return ["proposal-id"];
	}
	#attributeProposalIdValue: string | null = null;
	get proposalId(): string | null {
		return this.#attributeProposalIdValue;
	}
	set proposalId(v: string | null) {
		if (v == null) {
			this.removeAttribute("proposal-id");
		}else{
			this.setAttribute("proposal-id", v);
		}
	}
	protected onProposalIdChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null) {
		switch(name) {
			case "proposal-id":
				this.#attributeProposalIdValue = newValue;
				this.onProposalIdChanged(oldValue, newValue);
				break;
			default:
				// Shouldn't happen
		}
	}
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				getCourtProposalVoteDetailsTemplate()
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "court-proposal-vote-details"); // allow for easy query selecting
		this.refs = new CourtProposalVoteDetailsRefs(this);
	}
	connectedCallback() {
		// To be overridden by child class
	}
	disconnectedCallback() {
		// To be overridden by child class
	}
	adoptedCallback() {
		// To be overridden by child class
	}
	public static registerElement() {
		customElements.define("court-proposal-vote-details", this, { extends: "dialog"});
	}
}
export type CourtProposalFormCollection1 = HTMLFormControlsCollection & {
	"vote": RadioNodeList;
	namedItem(name: "vote"): RadioNodeList;
};
export type CourtProposalFormValues1 = {
	"vote": "" | "approve" | "abstain" | "oppose";
};
interface HTMLFormElementKnownControls<C extends HTMLFormControlsCollection, V> extends HTMLFormElement {
	readonly elements: C;
	values: () => V;
};
